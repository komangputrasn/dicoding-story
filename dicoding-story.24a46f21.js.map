{"mappings":"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","sources":["<anon>","app.js","views/home-page.js","presenters/story-presenter.js","presenters/base-presenter.js","models/story-model.js","services/api-service.js","services/auth-service.js","services/indexeddb-service.js","views/add-story-page.js","services/push-notification-service.js","views/login-page.js","presenters/auth-presenter.js","models/auth-model.js","views/register-page.js","views/detail-page.js","views/favorites-page.js","node_modules/@parcel/runtime-js/lib/runtime-b0227c7b77558e44.js"],"sourcesContent":["class $60ac1acdbcb4c733$var$BasePresenter {\n    constructor(view){\n        this._view = view;\n    }\n    init() {}\n    handleError(error, defaultMessage = \"An error occurred\") {\n        const message = error.message || defaultMessage;\n        if (this._view && typeof this._view.showError === \"function\") this._view.showError(message);\n        console.error(\"Presenter error:\", error);\n        return message;\n    }\n}\nvar $60ac1acdbcb4c733$export$2e2bcd8739ae039 = $60ac1acdbcb4c733$var$BasePresenter;\n\n\nclass $6b1c4fe551cd88bd$var$AuthService {\n    constructor(){\n        this._storageKey = \"dicodingStoryAuth\";\n    }\n    setAuth(data) {\n        localStorage.setItem(this._storageKey, JSON.stringify(data));\n    }\n    getAuth() {\n        const data = localStorage.getItem(this._storageKey);\n        return data ? JSON.parse(data) : null;\n    }\n    isLoggedIn() {\n        return !!this.getAuth();\n    }\n    getToken() {\n        const auth = this.getAuth();\n        return auth ? auth.token : null;\n    }\n    getUserName() {\n        const auth = this.getAuth();\n        return auth ? auth.name : null;\n    }\n    logout() {\n        localStorage.removeItem(this._storageKey);\n    }\n}\nvar $6b1c4fe551cd88bd$export$2e2bcd8739ae039 = $6b1c4fe551cd88bd$var$AuthService;\n\n\nclass $dedf9fff028735c2$var$ApiService {\n    constructor(){\n        this._baseUrl = \"https://story-api.dicoding.dev/v1\";\n        this._authService = new (0, $6b1c4fe551cd88bd$export$2e2bcd8739ae039)();\n    }\n    _getAuthHeader() {\n        const token = this._authService.getToken();\n        console.log(\"Auth token: \" + token);\n        return token ? {\n            Authorization: `Bearer ${token}`\n        } : {};\n    }\n    async register(name, email, password) {\n        try {\n            const response = await fetch(`${this._baseUrl}/register`, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    name: name,\n                    email: email,\n                    password: password\n                })\n            });\n            const responseJson = await response.json();\n            if (responseJson.error) throw new Error(responseJson.message);\n            return responseJson;\n        } catch (error) {\n            throw new Error(`Register failed: ${error.message}`);\n        }\n    }\n    async login(email, password) {\n        try {\n            const response = await fetch(`${this._baseUrl}/login`, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    email: email,\n                    password: password\n                })\n            });\n            const responseJson = await response.json();\n            if (responseJson.error) throw new Error(responseJson.message);\n            this._authService.setAuth({\n                token: responseJson.loginResult.token,\n                name: responseJson.loginResult.name,\n                userId: responseJson.loginResult.userId\n            });\n            return responseJson;\n        } catch (error) {\n            throw new Error(`Login failed: ${error.message}`);\n        }\n    }\n    async getStories(page = 1, size = 10, location = 1) {\n        try {\n            const url = new URL(`${this._baseUrl}/stories`);\n            url.searchParams.append(\"page\", page);\n            url.searchParams.append(\"size\", size);\n            url.searchParams.append(\"location\", location);\n            const response = await fetch(url, {\n                headers: this._getAuthHeader()\n            });\n            const responseJson = await response.json();\n            if (responseJson.error) throw new Error(responseJson.message);\n            return responseJson.listStory;\n        } catch (error) {\n            if (!this._authService.isLoggedIn()) return this._getStoriesAsGuest();\n            throw new Error(`Failed to get stories: ${error.message}`);\n        }\n    }\n    async _getStoriesAsGuest() {\n        try {\n            return [];\n        } catch (error) {\n            throw new Error(`Failed to get stories as guest: ${error.message}`);\n        }\n    }\n    async getStoryDetail(id) {\n        try {\n            const response = await fetch(`${this._baseUrl}/stories/${id}`, {\n                headers: this._getAuthHeader()\n            });\n            const responseJson = await response.json();\n            if (responseJson.error) throw new Error(responseJson.message);\n            return responseJson.story;\n        } catch (error) {\n            throw new Error(`Failed to get story detail: ${error.message}`);\n        }\n    }\n    async addStory(description, photoBlob, lat, lon) {\n        try {\n            const formData = new FormData();\n            formData.append(\"description\", description);\n            formData.append(\"photo\", photoBlob);\n            if (lat && lon) {\n                formData.append(\"lat\", lat);\n                formData.append(\"lon\", lon);\n            }\n            const endpoint = this._authService.isLoggedIn() ? `${this._baseUrl}/stories` : `${this._baseUrl}/stories/guest`;\n            const headers = this._authService.isLoggedIn() ? this._getAuthHeader() : {};\n            const response = await fetch(endpoint, {\n                method: \"POST\",\n                headers: headers,\n                body: formData\n            });\n            const responseJson = await response.json();\n            if (responseJson.error) throw new Error(responseJson.message);\n            return responseJson;\n        } catch (error) {\n            throw new Error(`Failed to add story: ${error.message}`);\n        }\n    }\n}\nvar $dedf9fff028735c2$export$2e2bcd8739ae039 = $dedf9fff028735c2$var$ApiService;\n\n\nclass $f8fd31f58f15ba1c$var$StoryModel {\n    constructor(){\n        this._apiService = new (0, $dedf9fff028735c2$export$2e2bcd8739ae039)();\n    }\n    async getStories(page = 1, size = 10, location = 1) {\n        const stories = await this._apiService.getStories(page, size, location);\n        return stories;\n    }\n    async getStoryDetail(id) {\n        const story = await this._apiService.getStoryDetail(id);\n        return story;\n    }\n    async addStory(description, photoBlob, lat, lon) {\n        const result = await this._apiService.addStory(description, photoBlob, lat, lon);\n        return result;\n    }\n}\nvar $f8fd31f58f15ba1c$export$2e2bcd8739ae039 = $f8fd31f58f15ba1c$var$StoryModel;\n\n\nclass $887d86aa32cb20b0$var$StoryPresenter extends (0, $60ac1acdbcb4c733$export$2e2bcd8739ae039) {\n    constructor(view){\n        super(view);\n        this._storyModel = new (0, $f8fd31f58f15ba1c$export$2e2bcd8739ae039)(); // Gunakan StoryModel\n    }\n    async getStories(page = 1, size = 10, location = 1) {\n        try {\n            this._view.showLoading();\n            const stories = await this._storyModel.getStories(page, size, location);\n            return stories;\n        } catch (error) {\n            this._view.showError(`Failed to load stories: ${error.message}`);\n            return [];\n        } finally{\n            this._view.hideLoading();\n        }\n    }\n    async getStoryDetail(id) {\n        try {\n            this._view.showLoading();\n            const story = await this._storyModel.getStoryDetail(id);\n            return story;\n        } catch (error) {\n            this._view.showError(`Failed to load story: ${error.message}`);\n            throw error;\n        } finally{\n            this._view.hideLoading();\n        }\n    }\n    async addStory(description, photoBlob, lat, lon) {\n        try {\n            this._view.showLoading();\n            const result = await this._storyModel.addStory(description, photoBlob, lat, lon);\n            this._view.showSuccess(\"Story added successfully. Redirecting to home page...\");\n            return result;\n        } catch (error) {\n            this._view.showError(`Failed to add story: ${error.message}`);\n            throw error;\n        } finally{\n            this._view.hideLoading();\n        }\n    }\n}\nvar $887d86aa32cb20b0$export$2e2bcd8739ae039 = $887d86aa32cb20b0$var$StoryPresenter;\n\n\nclass $838de00941db0e13$var$IndexedDBService {\n    constructor(){\n        this.dbName = \"dicoding-story-db\";\n        this.dbVersion = 1;\n        this.db = null;\n    }\n    async init() {\n        return new Promise((resolve, reject)=>{\n            const request = indexedDB.open(this.dbName, this.dbVersion);\n            request.onerror = ()=>{\n                console.error(\"Failed to open IndexedDB:\", request.error);\n                reject(request.error);\n            };\n            request.onsuccess = ()=>{\n                this.db = request.result;\n                console.log(\"IndexedDB opened successfully\");\n                resolve(this.db);\n            };\n            request.onupgradeneeded = (event)=>{\n                this.db = event.target.result;\n                this.createObjectStores();\n            };\n        });\n    }\n    createObjectStores() {\n        // Store for favorite stories\n        if (!this.db.objectStoreNames.contains(\"favorite-stories\")) {\n            const favoriteStore = this.db.createObjectStore(\"favorite-stories\", {\n                keyPath: \"id\"\n            });\n            favoriteStore.createIndex(\"createdAt\", \"createdAt\", {\n                unique: false\n            });\n        }\n        // Store for offline stories (pending upload)\n        if (!this.db.objectStoreNames.contains(\"offline-stories\")) {\n            const offlineStore = this.db.createObjectStore(\"offline-stories\", {\n                keyPath: \"id\",\n                autoIncrement: true\n            });\n            offlineStore.createIndex(\"timestamp\", \"timestamp\", {\n                unique: false\n            });\n        }\n        // Store for cached stories for offline viewing\n        if (!this.db.objectStoreNames.contains(\"cached-stories\")) {\n            const cachedStore = this.db.createObjectStore(\"cached-stories\", {\n                keyPath: \"id\"\n            });\n            cachedStore.createIndex(\"cachedAt\", \"cachedAt\", {\n                unique: false\n            });\n        }\n        console.log(\"Object stores created successfully\");\n    }\n    // Favorite Stories Operations\n    async addFavoriteStory(story) {\n        try {\n            const transaction = this.db.transaction([\n                \"favorite-stories\"\n            ], \"readwrite\");\n            const store = transaction.objectStore(\"favorite-stories\");\n            const favoriteStory = {\n                ...story,\n                favoriteAt: new Date().toISOString()\n            };\n            await this.executeTransaction(store.add(favoriteStory));\n            console.log(\"Story added to favorites:\", story.id);\n            return true;\n        } catch (error) {\n            console.error(\"Failed to add favorite story:\", error);\n            throw error;\n        }\n    }\n    async removeFavoriteStory(storyId) {\n        try {\n            const transaction = this.db.transaction([\n                \"favorite-stories\"\n            ], \"readwrite\");\n            const store = transaction.objectStore(\"favorite-stories\");\n            await this.executeTransaction(store.delete(storyId));\n            console.log(\"Story removed from favorites:\", storyId);\n            return true;\n        } catch (error) {\n            console.error(\"Failed to remove favorite story:\", error);\n            throw error;\n        }\n    }\n    async getFavoriteStories() {\n        try {\n            const transaction = this.db.transaction([\n                \"favorite-stories\"\n            ], \"readonly\");\n            const store = transaction.objectStore(\"favorite-stories\");\n            const result = await this.executeTransaction(store.getAll());\n            console.log(\"Retrieved favorite stories:\", result.length);\n            return result;\n        } catch (error) {\n            console.error(\"Failed to get favorite stories:\", error);\n            return [];\n        }\n    }\n    async isFavoriteStory(storyId) {\n        try {\n            const transaction = this.db.transaction([\n                \"favorite-stories\"\n            ], \"readonly\");\n            const store = transaction.objectStore(\"favorite-stories\");\n            const result = await this.executeTransaction(store.get(storyId));\n            return !!result;\n        } catch (error) {\n            console.error(\"Failed to check favorite story:\", error);\n            return false;\n        }\n    }\n    // Offline Stories Operations\n    async addOfflineStory(description, photoBlob, lat, lon) {\n        try {\n            const transaction = this.db.transaction([\n                \"offline-stories\"\n            ], \"readwrite\");\n            const store = transaction.objectStore(\"offline-stories\");\n            const offlineStory = {\n                description: description,\n                photoBlob: photoBlob,\n                lat: lat,\n                lon: lon,\n                timestamp: new Date().toISOString(),\n                synced: false\n            };\n            const result = await this.executeTransaction(store.add(offlineStory));\n            console.log(\"Offline story added:\", result);\n            return result;\n        } catch (error) {\n            console.error(\"Failed to add offline story:\", error);\n            throw error;\n        }\n    }\n    async getOfflineStories() {\n        try {\n            const transaction = this.db.transaction([\n                \"offline-stories\"\n            ], \"readonly\");\n            const store = transaction.objectStore(\"offline-stories\");\n            const result = await this.executeTransaction(store.getAll());\n            console.log(\"Retrieved offline stories:\", result.length);\n            return result;\n        } catch (error) {\n            console.error(\"Failed to get offline stories:\", error);\n            return [];\n        }\n    }\n    async removeOfflineStory(id) {\n        try {\n            const transaction = this.db.transaction([\n                \"offline-stories\"\n            ], \"readwrite\");\n            const store = transaction.objectStore(\"offline-stories\");\n            await this.executeTransaction(store.delete(id));\n            console.log(\"Offline story removed:\", id);\n            return true;\n        } catch (error) {\n            console.error(\"Failed to remove offline story:\", error);\n            throw error;\n        }\n    }\n    // Cached Stories Operations\n    async cacheStory(story) {\n        try {\n            const transaction = this.db.transaction([\n                \"cached-stories\"\n            ], \"readwrite\");\n            const store = transaction.objectStore(\"cached-stories\");\n            const cachedStory = {\n                ...story,\n                cachedAt: new Date().toISOString()\n            };\n            await this.executeTransaction(store.put(cachedStory));\n            console.log(\"Story cached:\", story.id);\n            return true;\n        } catch (error) {\n            console.error(\"Failed to cache story:\", error);\n            throw error;\n        }\n    }\n    async getCachedStories() {\n        try {\n            const transaction = this.db.transaction([\n                \"cached-stories\"\n            ], \"readonly\");\n            const store = transaction.objectStore(\"cached-stories\");\n            const result = await this.executeTransaction(store.getAll());\n            console.log(\"Retrieved cached stories:\", result.length);\n            return result;\n        } catch (error) {\n            console.error(\"Failed to get cached stories:\", error);\n            return [];\n        }\n    }\n    async getCachedStory(storyId) {\n        try {\n            const transaction = this.db.transaction([\n                \"cached-stories\"\n            ], \"readonly\");\n            const store = transaction.objectStore(\"cached-stories\");\n            const result = await this.executeTransaction(store.get(storyId));\n            return result;\n        } catch (error) {\n            console.error(\"Failed to get cached story:\", error);\n            return null;\n        }\n    }\n    // Clear old cached stories (older than 7 days)\n    async clearOldCachedStories() {\n        try {\n            const transaction = this.db.transaction([\n                \"cached-stories\"\n            ], \"readwrite\");\n            const store = transaction.objectStore(\"cached-stories\");\n            const index = store.index(\"cachedAt\");\n            const sevenDaysAgo = new Date();\n            sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);\n            const range = IDBKeyRange.upperBound(sevenDaysAgo.toISOString());\n            const request = index.openCursor(range);\n            return new Promise((resolve, reject)=>{\n                request.onsuccess = (event)=>{\n                    const cursor = event.target.result;\n                    if (cursor) {\n                        cursor.delete();\n                        cursor.continue();\n                    } else {\n                        console.log(\"Old cached stories cleared\");\n                        resolve();\n                    }\n                };\n                request.onerror = ()=>reject(request.error);\n            });\n        } catch (error) {\n            console.error(\"Failed to clear old cached stories:\", error);\n        }\n    }\n    // Utility method to execute transactions\n    executeTransaction(request) {\n        return new Promise((resolve, reject)=>{\n            request.onsuccess = ()=>resolve(request.result);\n            request.onerror = ()=>reject(request.error);\n        });\n    }\n    // Close database connection\n    close() {\n        if (this.db) {\n            this.db.close();\n            this.db = null;\n            console.log(\"IndexedDB connection closed\");\n        }\n    }\n}\nvar $838de00941db0e13$export$2e2bcd8739ae039 = $838de00941db0e13$var$IndexedDBService;\n\n\nclass $05a4d3ded1111bd8$var$HomePage {\n    constructor(container){\n        this._container = container;\n        this._presenter = new (0, $887d86aa32cb20b0$export$2e2bcd8739ae039)(this);\n        this._indexedDBService = new (0, $838de00941db0e13$export$2e2bcd8739ae039)();\n        this._stories = [];\n        this._map = null;\n    }\n    async render() {\n        this._container.innerHTML = `\n      <section class=\"page\" role=\"region\" aria-labelledby=\"home-title\">\n        <h2 id=\"home-title\">Latest Stories</h2>\n        <div id=\"loading\" role=\"status\" aria-live=\"polite\">Loading stories...</div>\n        <div id=\"error-container\" role=\"alert\" aria-live=\"assertive\" style=\"display:none;\"></div>\n        <div id=\"map\" aria-label=\"Map showing story locations\"></div>\n        <div id=\"story-list\" class=\"story-list\"></div>\n      </section>\n    `;\n        await this._initIndexedDB();\n        await this._fetchStories();\n        this._initMap();\n        this._renderStories();\n    }\n    async _initIndexedDB() {\n        try {\n            await this._indexedDBService.init();\n        } catch (error) {\n            console.error(\"Failed to initialize IndexedDB:\", error);\n        }\n    }\n    async _fetchStories() {\n        this._stories = await this._presenter.getStories(1, 10, 1);\n    }\n    async _renderStories() {\n        const storyListElement = document.getElementById(\"story-list\");\n        const loadingElement = document.getElementById(\"loading\");\n        loadingElement.style.display = \"none\";\n        if (this._stories.length === 0) {\n            storyListElement.innerHTML = \"<p>No stories found. Please login to see stories or add new ones.</p>\";\n            return;\n        }\n        // Cache stories for offline viewing\n        for (const story of this._stories)try {\n            await this._indexedDBService.cacheStory(story);\n        } catch (error) {\n            console.error(\"Failed to cache story:\", error);\n        }\n        storyListElement.innerHTML = await Promise.all(this._stories.map(async (story)=>{\n            const isFavorite = await this._checkIfFavorite(story.id);\n            return `\n      <article class=\"story-item\">\n        <img src=\"${story.photoUrl}\" alt=\"Photo by ${story.name}\" class=\"story-img\">\n        <div class=\"story-content\">\n          <h3>${story.name}</h3>\n          <p class=\"story-description\">${this._truncateText(story.description, 100)}</p>\n          <p class=\"story-date\">${this._formatDate(story.createdAt)}</p>\n          <div class=\"story-actions\">\n            <a href=\"#/detail/${story.id}\" class=\"story-link\">Read more</a>\n            <button \n              class=\"favorite-btn ${isFavorite ? \"is-favorite\" : \"\"}\" \n              data-story-id=\"${story.id}\"\n              aria-label=\"${isFavorite ? \"Remove from favorites\" : \"Add to favorites\"}\"\n            >\n              ${isFavorite ? \"\\u2764\\uFE0F Remove from Favorites\" : \"\\uD83E\\uDD0D Add to Favorites\"}\n            </button>\n          </div>\n        </div>\n      </article>\n    `;\n        })).then((storyHtmlArray)=>storyHtmlArray.join(\"\"));\n        this._initFavoriteButtons();\n    }\n    async _checkIfFavorite(storyId) {\n        try {\n            return await this._indexedDBService.isFavoriteStory(storyId);\n        } catch (error) {\n            console.error(\"Failed to check favorite status:\", error);\n            return false;\n        }\n    }\n    _initFavoriteButtons() {\n        const favoriteButtons = document.querySelectorAll(\".favorite-btn\");\n        favoriteButtons.forEach((button)=>{\n            button.addEventListener(\"click\", async (e)=>{\n                e.preventDefault();\n                const storyId = button.dataset.storyId;\n                const isFavorite = button.classList.contains(\"is-favorite\");\n                try {\n                    if (isFavorite) await this._removeFavorite(storyId, button);\n                    else await this._addFavorite(storyId, button);\n                } catch (error) {\n                    console.error(\"Failed to update favorite:\", error);\n                    this.showError(\"Failed to update favorite status\");\n                }\n            });\n        });\n    }\n    async _addFavorite(storyId, button) {\n        const story = this._stories.find((s)=>s.id === storyId);\n        if (!story) return;\n        await this._indexedDBService.addFavoriteStory(story);\n        button.classList.add(\"is-favorite\");\n        button.textContent = \"\\u2764\\uFE0F Remove from Favorites\";\n        button.setAttribute(\"aria-label\", \"Remove from favorites\");\n        this.showSuccess(\"Story added to favorites!\");\n    }\n    async _removeFavorite(storyId, button) {\n        await this._indexedDBService.removeFavoriteStory(storyId);\n        button.classList.remove(\"is-favorite\");\n        button.textContent = \"\\uD83E\\uDD0D Add to Favorites\";\n        button.setAttribute(\"aria-label\", \"Add to favorites\");\n        this.showSuccess(\"Story removed from favorites!\");\n    }\n    _initMap() {\n        this._map = L.map(\"map\").setView([\n            0,\n            0\n        ], 2);\n        L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n            attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n        }).addTo(this._map);\n        this._stories.forEach((story)=>{\n            if (story.lat && story.lon) {\n                const marker = L.marker([\n                    story.lat,\n                    story.lon\n                ]).addTo(this._map);\n                marker.bindPopup(`\n          <div class=\"map-popup\">\n            <img src=\"${story.photoUrl}\" alt=\"Photo by ${story.name}\">\n            <h3>${story.name}</h3>\n            <p>${this._truncateText(story.description, 50)}</p>\n            <a href=\"#/detail/${story.id}\">View Story</a>\n          </div>\n        `);\n            }\n        });\n    }\n    _truncateText(text, maxLength) {\n        if (text.length <= maxLength) return text;\n        return text.substring(0, maxLength) + \"...\";\n    }\n    _formatDate(dateString) {\n        const options = {\n            year: \"numeric\",\n            month: \"short\",\n            day: \"numeric\"\n        };\n        return new Date(dateString).toLocaleDateString(\"id-ID\", options);\n    }\n    showLoading() {\n        const loadingElement = document.getElementById(\"loading\");\n        loadingElement.style.display = \"block\";\n    }\n    hideLoading() {\n        const loadingElement = document.getElementById(\"loading\");\n        loadingElement.style.display = \"none\";\n    }\n    showError(message) {\n        const errorContainer = document.getElementById(\"error-container\");\n        errorContainer.style.display = \"block\";\n        errorContainer.innerHTML = `\n      <div class=\"alert alert-danger\">\n        ${message}\n      </div>\n    `;\n    }\n    showSuccess(message) {\n        const errorContainer = document.getElementById(\"error-container\");\n        errorContainer.style.display = \"block\";\n        errorContainer.innerHTML = `\n      <div class=\"alert alert-success\">\n        ${message}\n      </div>\n    `;\n        // Auto-hide success message after 3 seconds\n        setTimeout(()=>{\n            errorContainer.style.display = \"none\";\n        }, 3000);\n    }\n}\nvar $05a4d3ded1111bd8$export$2e2bcd8739ae039 = $05a4d3ded1111bd8$var$HomePage;\n\n\n\n\nclass $044e26d168a7491a$var$PushNotificationService {\n    constructor(){\n        this.authService = new (0, $6b1c4fe551cd88bd$export$2e2bcd8739ae039)();\n        this.vapidPublicKey = \"BCCs2eonMI-6H2ctvFaWg-UYdDv387Vno_bzUzALpB442r2lCnsHmtrx8biyPi_E-1fSGABK_Qs_GlvPoJJqxbk\";\n        this.apiBaseUrl = \"https://story-api.dicoding.dev/v1\";\n        this.registration = null;\n    }\n    async init() {\n        try {\n            // Check if service worker is supported\n            if (!(\"serviceWorker\" in navigator)) throw new Error(\"Service Worker not supported\");\n            // Check if push messaging is supported\n            if (!(\"PushManager\" in window)) throw new Error(\"Push messaging not supported\");\n            // Get service worker registration\n            this.registration = await navigator.serviceWorker.ready;\n            console.log(\"Push notification service initialized\");\n            return true;\n        } catch (error) {\n            console.error(\"Failed to initialize push notification service:\", error);\n            throw error;\n        }\n    }\n    async requestPermission() {\n        try {\n            // Check if Notification API is supported\n            if (!(\"Notification\" in window)) throw new Error(\"This browser does not support notifications\");\n            // Check current permission status\n            let permission = Notification.permission;\n            if (permission === \"default\") // Request permission\n            permission = await Notification.requestPermission();\n            if (permission === \"granted\") {\n                console.log(\"Notification permission granted\");\n                return true;\n            } else if (permission === \"denied\") {\n                console.log(\"Notification permission denied\");\n                throw new Error(\"Notification permission was denied. Please enable notifications in your browser settings.\");\n            } else {\n                console.log(\"Notification permission dismissed\");\n                throw new Error(\"Notification permission was not granted\");\n            }\n        } catch (error) {\n            console.error(\"Error requesting notification permission:\", error);\n            throw error;\n        }\n    }\n    async subscribe() {\n        try {\n            // Check if user is logged in\n            if (!this.authService.isLoggedIn()) throw new Error(\"User must be logged in to subscribe to notifications\");\n            // Initialize if not already done\n            if (!this.registration) await this.init();\n            // Request permission explicitly first\n            await this.requestPermission();\n            // Check if already subscribed\n            const existingSubscription = await this.registration.pushManager.getSubscription();\n            if (existingSubscription) {\n                console.log(\"Already subscribed to push notifications\");\n                return existingSubscription;\n            }\n            // Create new subscription\n            const subscription = await this.registration.pushManager.subscribe({\n                userVisibleOnly: true,\n                applicationServerKey: this.urlBase64ToUint8Array(this.vapidPublicKey)\n            });\n            // Send subscription to server\n            await this.sendSubscriptionToServer(subscription);\n            console.log(\"Successfully subscribed to push notifications\");\n            return subscription;\n        } catch (error) {\n            console.error(\"Failed to subscribe to push notifications:\", error);\n            throw error;\n        }\n    }\n    async unsubscribe() {\n        try {\n            if (!this.registration) await this.init();\n            const subscription = await this.registration.pushManager.getSubscription();\n            if (!subscription) {\n                console.log(\"Not subscribed to push notifications\");\n                return true;\n            }\n            // Unsubscribe from browser\n            await subscription.unsubscribe();\n            // Remove subscription from server\n            await this.removeSubscriptionFromServer(subscription);\n            console.log(\"Successfully unsubscribed from push notifications\");\n            return true;\n        } catch (error) {\n            console.error(\"Failed to unsubscribe from push notifications:\", error);\n            throw error;\n        }\n    }\n    async getSubscriptionStatus() {\n        try {\n            if (!this.registration) await this.init();\n            const subscription = await this.registration.pushManager.getSubscription();\n            return {\n                isSubscribed: !!subscription,\n                subscription: subscription\n            };\n        } catch (error) {\n            console.error(\"Failed to get subscription status:\", error);\n            return {\n                isSubscribed: false,\n                subscription: null\n            };\n        }\n    }\n    async sendSubscriptionToServer(subscription) {\n        try {\n            const token = this.authService.getToken();\n            const subscriptionData = {\n                endpoint: subscription.endpoint,\n                keys: {\n                    p256dh: this.arrayBufferToBase64(subscription.getKey(\"p256dh\")),\n                    auth: this.arrayBufferToBase64(subscription.getKey(\"auth\"))\n                }\n            };\n            const response = await fetch(`${this.apiBaseUrl}/notifications/subscribe`, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    Authorization: `Bearer ${token}`\n                },\n                body: JSON.stringify(subscriptionData)\n            });\n            const responseData = await response.json();\n            if (!response.ok || responseData.error) throw new Error(responseData.message || \"Failed to subscribe on server\");\n            console.log(\"Subscription sent to server successfully\");\n            return responseData;\n        } catch (error) {\n            console.error(\"Failed to send subscription to server:\", error);\n            throw error;\n        }\n    }\n    async removeSubscriptionFromServer(subscription) {\n        try {\n            const token = this.authService.getToken();\n            const subscriptionData = {\n                endpoint: subscription.endpoint\n            };\n            const response = await fetch(`${this.apiBaseUrl}/notifications/subscribe`, {\n                method: \"DELETE\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    Authorization: `Bearer ${token}`\n                },\n                body: JSON.stringify(subscriptionData)\n            });\n            const responseData = await response.json();\n            if (!response.ok || responseData.error) throw new Error(responseData.message || \"Failed to unsubscribe on server\");\n            console.log(\"Subscription removed from server successfully\");\n            return responseData;\n        } catch (error) {\n            console.error(\"Failed to remove subscription from server:\", error);\n            throw error;\n        }\n    }\n    // Helper method to convert VAPID key\n    urlBase64ToUint8Array(base64String) {\n        const padding = \"=\".repeat((4 - base64String.length % 4) % 4);\n        const base64 = (base64String + padding).replace(/-/g, \"+\").replace(/_/g, \"/\");\n        const rawData = window.atob(base64);\n        const outputArray = new Uint8Array(rawData.length);\n        for(let i = 0; i < rawData.length; ++i)outputArray[i] = rawData.charCodeAt(i);\n        return outputArray;\n    }\n    // Helper method to convert ArrayBuffer to base64\n    arrayBufferToBase64(buffer) {\n        const bytes = new Uint8Array(buffer);\n        let binary = \"\";\n        for(let i = 0; i < bytes.byteLength; i++)binary += String.fromCharCode(bytes[i]);\n        return window.btoa(binary);\n    }\n    // Test notification (for development)\n    async sendTestNotification() {\n        try {\n            if (Notification.permission === \"granted\") new Notification(\"Test Notification\", {\n                body: \"This is a test notification from Dicoding Story App\",\n                icon: \"/icons/icon-192x192.png\",\n                badge: \"/icons/icon-72x72.png\"\n            });\n        } catch (error) {\n            console.error(\"Failed to send test notification:\", error);\n        }\n    }\n    getPermissionStatus() {\n        if (!(\"Notification\" in window)) return \"unsupported\";\n        return Notification.permission;\n    }\n    isPermissionGranted() {\n        return this.getPermissionStatus() === \"granted\";\n    }\n}\nvar $044e26d168a7491a$export$2e2bcd8739ae039 = $044e26d168a7491a$var$PushNotificationService;\n\n\n\nclass $2a138afe4ef81a36$var$AddStoryPage {\n    constructor(container){\n        this._container = container;\n        this._presenter = new (0, $887d86aa32cb20b0$export$2e2bcd8739ae039)(this);\n        this._pushNotificationService = new (0, $044e26d168a7491a$export$2e2bcd8739ae039)();\n        this._indexedDBService = new (0, $838de00941db0e13$export$2e2bcd8739ae039)();\n        this._map = null;\n        this._marker = null;\n        this._position = null;\n        this._photoBlob = null;\n        this._stream = null;\n    }\n    async render() {\n        this._container.innerHTML = `\n      <section class=\"page form-container\" role=\"region\" aria-labelledby=\"add-story-title\">\n        <h2 id=\"add-story-title\">Add New Story</h2>\n        <div id=\"alert-container\" role=\"alert\" aria-live=\"assertive\"></div>\n        \n        <!-- Push Notification Section -->\n        <div id=\"notification-section\" class=\"form-group\">\n          <h3>Push Notifications</h3>\n          <div id=\"notification-status\"></div>\n          <button type=\"button\" id=\"enable-notifications\" style=\"display: none;\">Enable Notifications</button>\n          <button type=\"button\" id=\"disable-notifications\" style=\"display: none;\">Disable Notifications</button>\n        </div>\n        \n        <form id=\"add-story-form\">\n          <div class=\"form-group\">\n            <label for=\"description\">Description</label>\n            <textarea id=\"description\" name=\"description\" rows=\"4\" required></textarea>\n          </div>\n\n          <div class=\"form-group\">\n            <label for=\"map\">Location (Click on map to set)</label>\n            <div id=\"map\" aria-label=\"Map to select story location\" tabindex=\"0\"></div>\n            <p id=\"location-display\" aria-live=\"polite\">No location selected</p>\n          </div>\n\n          <div class=\"form-group camera-container\">\n            <label for=\"video\">Take Photo with Camera</label>\n            <video id=\"video\" autoplay aria-label=\"Camera preview\"></video>\n            <canvas id=\"canvas\"></canvas>\n            <div class=\"camera-buttons\">\n              <button type=\"button\" id=\"start-camera\">Start Camera</button>\n              <button type=\"button\" id=\"capture-photo\" disabled>Capture Photo</button>\n              <button type=\"button\" id=\"stop-camera\" disabled>Stop Camera</button>\n            </div>\n          </div>\n\n          <div class=\"preview-container\">\n            <label for=\"preview\">Photo Preview</label>\n            <img id=\"preview\" src=\"\" alt=\"Captured photo preview\" style=\"display: none;\">\n          </div>\n\n          <button type=\"submit\" id=\"submit-button\" disabled>Add Story</button>\n        </form>\n      </section>\n    `;\n        await this._initServices();\n        this._initMap();\n        this._initCameraButtons();\n        this._initForm();\n        this._initNotificationSection();\n    }\n    async _initServices() {\n        try {\n            await this._indexedDBService.init();\n            await this._pushNotificationService.init();\n        } catch (error) {\n            console.error(\"Failed to initialize services:\", error);\n        }\n    }\n    _initMap() {\n        this._map = L.map(\"map\").setView([\n            0,\n            0\n        ], 2);\n        L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n            attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n        }).addTo(this._map);\n        this._map.on(\"click\", (e)=>{\n            this._position = {\n                lat: e.latlng.lat,\n                lon: e.latlng.lng\n            };\n            document.getElementById(\"location-display\").textContent = `Location: ${this._position.lat.toFixed(4)}, ${this._position.lon.toFixed(4)}`;\n            if (this._marker) this._marker.setLatLng(e.latlng);\n            else this._marker = L.marker(e.latlng).addTo(this._map);\n            this._updateSubmitButton();\n        });\n    }\n    _initCameraButtons() {\n        const startCameraButton = document.getElementById(\"start-camera\");\n        const capturPhotoButton = document.getElementById(\"capture-photo\");\n        const stopCameraButton = document.getElementById(\"stop-camera\");\n        const video = document.getElementById(\"video\");\n        const canvas = document.getElementById(\"canvas\");\n        const preview = document.getElementById(\"preview\");\n        startCameraButton.addEventListener(\"click\", async ()=>{\n            try {\n                this._stream = await navigator.mediaDevices.getUserMedia({\n                    video: true,\n                    audio: false\n                });\n                video.srcObject = this._stream;\n                startCameraButton.disabled = true;\n                capturPhotoButton.disabled = false;\n                stopCameraButton.disabled = false;\n            } catch (error) {\n                console.error(\"Error accessing camera:\", error);\n                this.showError(`Failed to access camera: ${error.message}`);\n            }\n        });\n        capturPhotoButton.addEventListener(\"click\", ()=>{\n            canvas.width = video.videoWidth;\n            canvas.height = video.videoHeight;\n            const context = canvas.getContext(\"2d\");\n            context.drawImage(video, 0, 0, canvas.width, canvas.height);\n            canvas.toBlob((blob)=>{\n                this._photoBlob = blob;\n                const url = URL.createObjectURL(blob);\n                preview.src = url;\n                preview.style.display = \"block\";\n                this._updateSubmitButton();\n            }, \"image/jpeg\", 0.8);\n        });\n        stopCameraButton.addEventListener(\"click\", ()=>{\n            if (this._stream) {\n                this._stream.getTracks().forEach((track)=>track.stop());\n                this._stream = null;\n                video.srcObject = null;\n            }\n            startCameraButton.disabled = false;\n            capturPhotoButton.disabled = true;\n            stopCameraButton.disabled = true;\n        });\n    }\n    _initForm() {\n        const form = document.getElementById(\"add-story-form\");\n        form.addEventListener(\"submit\", async (e)=>{\n            e.preventDefault();\n            const description = document.getElementById(\"description\").value;\n            try {\n                // Check if online\n                if (navigator.onLine) {\n                    // Use presenter instead of directly calling the API\n                    await this._presenter.addStory(description, this._photoBlob, this._position?.lat, this._position?.lon);\n                    // Try to send push notification after successful story creation\n                    await this._sendStoryNotification(description);\n                } else {\n                    // Save for offline sync\n                    await this._saveOfflineStory(description);\n                    this.showSuccess(\"Story saved offline. It will be uploaded when you're back online.\");\n                }\n                if (this._stream) this._stream.getTracks().forEach((track)=>track.stop());\n                setTimeout(()=>{\n                    window.location.hash = \"#/home\";\n                }, 2000);\n            } catch (error) {\n                // Error handling is managed by the presenter\n                console.error(error);\n            }\n        });\n    }\n    async _saveOfflineStory(description) {\n        try {\n            await this._indexedDBService.addOfflineStory(description, this._photoBlob, this._position?.lat, this._position?.lon);\n            // Register for background sync if supported\n            if (\"serviceWorker\" in navigator && \"sync\" in window.ServiceWorkerRegistration.prototype) {\n                const registration = await navigator.serviceWorker.ready;\n                await registration.sync.register(\"background-sync-story\");\n            }\n        } catch (error) {\n            console.error(\"Failed to save offline story:\", error);\n            throw new Error(\"Failed to save story offline\");\n        }\n    }\n    async _sendStoryNotification(description) {\n        try {\n            // Check if push notifications are supported and subscribed\n            const status = await this._pushNotificationService.getSubscriptionStatus();\n            if (status.isSubscribed) // The server will send the push notification\n            console.log(\"Story created, push notification will be sent by server\");\n        } catch (error) {\n            console.error(\"Failed to handle push notification:\", error);\n        // Don't throw error as story creation was successful\n        }\n    }\n    async _initNotificationSection() {\n        const statusElement = document.getElementById(\"notification-status\");\n        const enableButton = document.getElementById(\"enable-notifications\");\n        const disableButton = document.getElementById(\"disable-notifications\");\n        try {\n            // Check if notifications are supported\n            if (!(\"Notification\" in window) || !(\"PushManager\" in window)) {\n                statusElement.innerHTML = '<p class=\"alert alert-warning\">\\u26A0\\uFE0F Push notifications are not supported in this browser</p>';\n                enableButton.style.display = \"none\";\n                disableButton.style.display = \"none\";\n                return;\n            }\n            const permissionStatus = this._pushNotificationService.getPermissionStatus();\n            const status = await this._pushNotificationService.getSubscriptionStatus();\n            if (permissionStatus === \"denied\") {\n                statusElement.innerHTML = '<p class=\"alert alert-error\">\\uD83D\\uDEAB Notifications are blocked. Please enable them in your browser settings.</p>';\n                enableButton.style.display = \"none\";\n                disableButton.style.display = \"none\";\n            } else if (status.isSubscribed) {\n                statusElement.innerHTML = '<p class=\"alert alert-success\">\\u2705 Push notifications are enabled</p>';\n                disableButton.style.display = \"inline-block\";\n                enableButton.style.display = \"none\";\n            } else {\n                statusElement.innerHTML = '<p class=\"alert alert-info\">\\uD83D\\uDD14 Enable push notifications to get notified when your stories are published</p>';\n                enableButton.style.display = \"inline-block\";\n                disableButton.style.display = \"none\";\n            }\n        } catch (error) {\n            console.error(\"Error checking notification status:\", error);\n            statusElement.innerHTML = '<p class=\"alert alert-warning\">\\u26A0\\uFE0F Unable to check notification status</p>';\n            enableButton.style.display = \"none\";\n            disableButton.style.display = \"none\";\n        }\n        enableButton.addEventListener(\"click\", async ()=>{\n            try {\n                // Show loading state\n                enableButton.disabled = true;\n                enableButton.textContent = \"Enabling...\";\n                // Check permission first\n                const permissionStatus = this._pushNotificationService.getPermissionStatus();\n                if (permissionStatus === \"denied\") throw new Error(\"Notifications are blocked. Please enable them in your browser settings and try again.\");\n                await this._pushNotificationService.subscribe();\n                await this._initNotificationSection(); // Refresh the section\n                this.showSuccess(\"Push notifications enabled successfully!\");\n            } catch (error) {\n                console.error(\"Failed to enable notifications:\", error);\n                // Provide specific error messages\n                let errorMessage = \"Failed to enable push notifications\";\n                if (error.message.includes(\"permission\")) errorMessage = \"Permission denied. Please allow notifications in your browser and try again.\";\n                else if (error.message.includes(\"login\")) errorMessage = \"Please log in first to enable notifications.\";\n                else if (error.message.includes(\"settings\")) errorMessage = error.message;\n                this.showError(errorMessage);\n            } finally{\n                // Reset button state\n                enableButton.disabled = false;\n                enableButton.textContent = \"Enable Notifications\";\n            }\n        });\n        disableButton.addEventListener(\"click\", async ()=>{\n            try {\n                await this._pushNotificationService.unsubscribe();\n                await this._initNotificationSection(); // Refresh the section\n                this.showSuccess(\"Push notifications disabled successfully!\");\n            } catch (error) {\n                console.error(\"Failed to disable notifications:\", error);\n                this.showError(\"Failed to disable push notifications\");\n            }\n        });\n    }\n    _updateSubmitButton() {\n        const submitButton = document.getElementById(\"submit-button\");\n        submitButton.disabled = !this._photoBlob;\n    }\n    // Methods called by the presenter\n    showLoading() {\n        const submitButton = document.getElementById(\"submit-button\");\n        submitButton.textContent = \"Adding Story...\";\n        submitButton.disabled = true;\n    }\n    hideLoading() {\n        const submitButton = document.getElementById(\"submit-button\");\n        submitButton.textContent = \"Add Story\";\n        submitButton.disabled = !this._photoBlob;\n    }\n    showError(message) {\n        const alertContainer = document.getElementById(\"alert-container\");\n        alertContainer.innerHTML = `\n      <div class=\"alert alert-danger\">\n        ${message}\n      </div>\n    `;\n    }\n    showSuccess(message) {\n        const alertContainer = document.getElementById(\"alert-container\");\n        alertContainer.innerHTML = `\n      <div class=\"alert alert-success\">\n        ${message}\n      </div>\n    `;\n    }\n}\nvar $2a138afe4ef81a36$export$2e2bcd8739ae039 = $2a138afe4ef81a36$var$AddStoryPage;\n\n\n\n\n\nclass $142158d90aa42607$var$AuthModel {\n    constructor(){\n        this._apiService = new (0, $dedf9fff028735c2$export$2e2bcd8739ae039)();\n        this._authService = new (0, $6b1c4fe551cd88bd$export$2e2bcd8739ae039)();\n    }\n    async login(email, password) {\n        const result = await this._apiService.login(email, password);\n        return result;\n    }\n    async register(name, email, password) {\n        const result = await this._apiService.register(name, email, password);\n        return result;\n    }\n    isLoggedIn() {\n        return this._authService.isLoggedIn();\n    }\n    logout() {\n        this._authService.logout();\n    }\n}\nvar $142158d90aa42607$export$2e2bcd8739ae039 = $142158d90aa42607$var$AuthModel;\n\n\nclass $01a6d536217be17b$var$AuthPresenter extends (0, $60ac1acdbcb4c733$export$2e2bcd8739ae039) {\n    constructor(view){\n        super(view);\n        this._authModel = new (0, $142158d90aa42607$export$2e2bcd8739ae039)(); // Gunakan AuthModel\n    }\n    async login(email, password) {\n        try {\n            this._view.showLoading();\n            // Panggil metode login dari AuthModel\n            const result = await this._authModel.login(email, password);\n            this._view.showSuccess(\"Login successful. Redirecting to home page...\");\n            return result;\n        } catch (error) {\n            this._view.showError(error.message);\n            throw error;\n        } finally{\n            this._view.hideLoading();\n        }\n    }\n    async register(name, email, password) {\n        try {\n            this._view.showLoading();\n            // Panggil metode register dari AuthModel\n            const result = await this._authModel.register(name, email, password);\n            this._view.showSuccess(\"Registration successful. Please login with your new account.\");\n            return result;\n        } catch (error) {\n            this._view.showError(error.message);\n            throw error;\n        } finally{\n            this._view.hideLoading();\n        }\n    }\n    isLoggedIn() {\n        return this._authModel.isLoggedIn(); // Gunakan AuthModel\n    }\n    logout() {\n        this._authModel.logout(); // Gunakan AuthModel\n    }\n}\nvar $01a6d536217be17b$export$2e2bcd8739ae039 = $01a6d536217be17b$var$AuthPresenter;\n\n\nclass $d4e60c9d5a426170$var$LoginPage {\n    constructor(container){\n        this._container = container;\n        this._presenter = new (0, $01a6d536217be17b$export$2e2bcd8739ae039)(this);\n    }\n    async render() {\n        this._container.innerHTML = `\n      <section class=\"page form-container\" role=\"region\" aria-labelledby=\"login-title\">\n        <h2 id=\"login-title\">Login</h2>\n        <div id=\"alert-container\" role=\"alert\" aria-live=\"assertive\"></div>\n        <form id=\"login-form\">\n          <div class=\"form-group\">\n            <label for=\"email\">Email</label>\n            <input type=\"email\" id=\"email\" name=\"email\" required>\n          </div>\n          <div class=\"form-group\">\n            <label for=\"password\">Password</label>\n            <input type=\"password\" id=\"password\" name=\"password\" required>\n          </div>\n          <button type=\"submit\" id=\"submit-button\">Login</button>\n        </form>\n        <p>Don't have an account? <a href=\"#/register\">Register here</a></p>\n      </section>\n    `;\n        this._initLoginForm();\n    }\n    _initLoginForm() {\n        const form = document.getElementById(\"login-form\");\n        form.addEventListener(\"submit\", async (e)=>{\n            e.preventDefault();\n            const email = document.getElementById(\"email\").value;\n            const password = document.getElementById(\"password\").value;\n            try {\n                await this._presenter.login(email, password);\n                setTimeout(()=>{\n                    window.location.hash = \"#/home\";\n                }, 1000);\n            } catch (error) {\n                console.error(error);\n            }\n        });\n    }\n    showLoading() {\n        const button = document.getElementById(\"submit-button\");\n        button.textContent = \"Logging in...\";\n        button.disabled = true;\n    }\n    hideLoading() {\n        const button = document.getElementById(\"submit-button\");\n        button.textContent = \"Login\";\n        button.disabled = false;\n    }\n    showError(message) {\n        const alertContainer = document.getElementById(\"alert-container\");\n        alertContainer.innerHTML = `\n      <div class=\"alert alert-danger\">\n        ${message}\n      </div>\n    `;\n    }\n    showSuccess(message) {\n        const alertContainer = document.getElementById(\"alert-container\");\n        alertContainer.innerHTML = `\n      <div class=\"alert alert-success\">\n        ${message}\n      </div>\n    `;\n    }\n}\nvar $d4e60c9d5a426170$export$2e2bcd8739ae039 = $d4e60c9d5a426170$var$LoginPage;\n\n\n\nclass $529e314e55a9390f$var$RegisterPage {\n    constructor(container){\n        this._container = container;\n        this._presenter = new (0, $01a6d536217be17b$export$2e2bcd8739ae039)(this);\n    }\n    async render() {\n        this._container.innerHTML = `\n      <section class=\"page form-container\" role=\"region\" aria-labelledby=\"register-title\">\n        <h2 id=\"register-title\">Register</h2>\n        <div id=\"alert-container\" role=\"alert\" aria-live=\"assertive\"></div>\n        <form id=\"register-form\">\n          <div class=\"form-group\">\n            <label for=\"name\">Name</label>\n            <input type=\"text\" id=\"name\" name=\"name\" required>\n          </div>\n          <div class=\"form-group\">\n            <label for=\"email\">Email</label>\n            <input type=\"email\" id=\"email\" name=\"email\" required>\n          </div>\n          <div class=\"form-group\">\n            <label for=\"password\">Password (min 8 characters)</label>\n            <input type=\"password\" id=\"password\" name=\"password\" minlength=\"8\" required>\n          </div>\n          <button type=\"submit\" id=\"submit-button\">Register</button>\n        </form>\n        <p>Already have an account? <a href=\"#/login\">Login here</a></p>\n      </section>\n    `;\n        this._initRegisterForm();\n    }\n    _initRegisterForm() {\n        const form = document.getElementById(\"register-form\");\n        form.addEventListener(\"submit\", async (e)=>{\n            e.preventDefault();\n            const name = document.getElementById(\"name\").value;\n            const email = document.getElementById(\"email\").value;\n            const password = document.getElementById(\"password\").value;\n            try {\n                await this._presenter.register(name, email, password);\n                setTimeout(()=>{\n                    window.location.hash = \"#/login\";\n                }, 2000);\n            } catch (error) {\n                console.error(error);\n            }\n        });\n    }\n    showLoading() {\n        const button = document.getElementById(\"submit-button\");\n        button.textContent = \"Registering...\";\n        button.disabled = true;\n    }\n    hideLoading() {\n        const button = document.getElementById(\"submit-button\");\n        button.textContent = \"Register\";\n        button.disabled = false;\n    }\n    showError(message) {\n        const alertContainer = document.getElementById(\"alert-container\");\n        alertContainer.innerHTML = `\n      <div class=\"alert alert-danger\">\n        ${message}\n      </div>\n    `;\n    }\n    showSuccess(message) {\n        const alertContainer = document.getElementById(\"alert-container\");\n        alertContainer.innerHTML = `\n      <div class=\"alert alert-success\">\n        ${message}\n      </div>\n    `;\n    }\n}\nvar $529e314e55a9390f$export$2e2bcd8739ae039 = $529e314e55a9390f$var$RegisterPage;\n\n\n\n\nclass $e78702615a38e5f9$var$DetailPage {\n    constructor(container, id){\n        this._container = container;\n        this._id = id;\n        this._presenter = new (0, $887d86aa32cb20b0$export$2e2bcd8739ae039)(this);\n        this._indexedDBService = new (0, $838de00941db0e13$export$2e2bcd8739ae039)();\n        this._story = null;\n        this._map = null;\n    }\n    async render() {\n        this._container.innerHTML = `\n      <section class=\"page\" role=\"region\" aria-labelledby=\"detail-title\">\n        <h2 id=\"detail-title\">Story Detail</h2>\n        <div id=\"loading\" role=\"status\" aria-live=\"polite\">Loading story...</div>\n        <div id=\"error-container\" role=\"alert\" aria-live=\"assertive\" style=\"display: none;\"></div>\n        <div id=\"story-detail\" style=\"display: none;\"></div>\n      </section>\n    `;\n        await this._initIndexedDB();\n        await this._fetchStory();\n        this._renderStory();\n    }\n    async _initIndexedDB() {\n        try {\n            await this._indexedDBService.init();\n        } catch (error) {\n            console.error(\"Failed to initialize IndexedDB:\", error);\n        }\n    }\n    async _fetchStory() {\n        try {\n            this._story = await this._presenter.getStoryDetail(this._id);\n        } catch (error) {\n            console.error(\"Error fetching story:\", error);\n            // Try to get from IndexedDB cache\n            try {\n                this._story = await this._indexedDBService.getCachedStory(this._id);\n                if (this._story) console.log(\"Story loaded from cache\");\n            } catch (cacheError) {\n                console.error(\"Error loading from cache:\", cacheError);\n            }\n        }\n    }\n    async _renderStory() {\n        if (!this._story) return;\n        document.getElementById(\"loading\").style.display = \"none\";\n        const storyDetail = document.getElementById(\"story-detail\");\n        storyDetail.style.display = \"block\";\n        const isFavorite = await this._checkIfFavorite(this._story.id);\n        storyDetail.innerHTML = `\n      <div class=\"story-detail\">\n        <img src=\"${this._story.photoUrl}\" alt=\"Photo by ${this._story.name}\" class=\"story-img\">\n        <h3>${this._story.name}</h3>\n        <p class=\"story-date\">${this._formatDate(this._story.createdAt)}</p>\n        <p class=\"story-description\">${this._story.description}</p>\n        <div class=\"story-actions\">\n          <button \n            id=\"favorite-btn\" \n            class=\"favorite-btn ${isFavorite ? \"is-favorite\" : \"\"}\"\n            aria-label=\"${isFavorite ? \"Remove from favorites\" : \"Add to favorites\"}\"\n          >\n            ${isFavorite ? \"\\u2764\\uFE0F Remove from Favorites\" : \"\\uD83E\\uDD0D Add to Favorites\"}\n          </button>\n        </div>\n        ${this._story.lat && this._story.lon ? '<div id=\"map\" aria-label=\"Map showing story location\"></div>' : \"\"}\n        <a href=\"#/home\">Back to Home</a>\n      </div>\n    `;\n        this._initFavoriteButton();\n        if (this._story.lat && this._story.lon) this._initMap();\n    }\n    async _checkIfFavorite(storyId) {\n        try {\n            return await this._indexedDBService.isFavoriteStory(storyId);\n        } catch (error) {\n            console.error(\"Failed to check favorite status:\", error);\n            return false;\n        }\n    }\n    _initFavoriteButton() {\n        const favoriteButton = document.getElementById(\"favorite-btn\");\n        favoriteButton.addEventListener(\"click\", async (e)=>{\n            e.preventDefault();\n            const isFavorite = favoriteButton.classList.contains(\"is-favorite\");\n            try {\n                if (isFavorite) await this._removeFavorite(favoriteButton);\n                else await this._addFavorite(favoriteButton);\n            } catch (error) {\n                console.error(\"Failed to update favorite:\", error);\n                this.showError(\"Failed to update favorite status\");\n            }\n        });\n    }\n    async _addFavorite(button) {\n        await this._indexedDBService.addFavoriteStory(this._story);\n        button.classList.add(\"is-favorite\");\n        button.textContent = \"\\u2764\\uFE0F Remove from Favorites\";\n        button.setAttribute(\"aria-label\", \"Remove from favorites\");\n        this.showSuccess(\"Story added to favorites!\");\n    }\n    async _removeFavorite(button) {\n        await this._indexedDBService.removeFavoriteStory(this._story.id);\n        button.classList.remove(\"is-favorite\");\n        button.textContent = \"\\uD83E\\uDD0D Add to Favorites\";\n        button.setAttribute(\"aria-label\", \"Add to favorites\");\n        this.showSuccess(\"Story removed from favorites!\");\n    }\n    _initMap() {\n        this._map = L.map(\"map\").setView([\n            this._story.lat,\n            this._story.lon\n        ], 13);\n        L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n            attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n        }).addTo(this._map);\n        const marker = L.marker([\n            this._story.lat,\n            this._story.lon\n        ]).addTo(this._map);\n        marker.bindPopup(`\n      <div class=\"map-popup\">\n        <img src=\"${this._story.photoUrl}\" alt=\"Photo by ${this._story.name}\">\n        <h3>${this._story.name}</h3>\n        <p>${this._truncateText(this._story.description, 50)}</p>\n      </div>\n    `).openPopup();\n    }\n    _truncateText(text, maxLength) {\n        if (text.length <= maxLength) return text;\n        return text.substring(0, maxLength) + \"...\";\n    }\n    _formatDate(dateString) {\n        const options = {\n            year: \"numeric\",\n            month: \"short\",\n            day: \"numeric\",\n            hour: \"numeric\",\n            minute: \"numeric\"\n        };\n        return new Date(dateString).toLocaleDateString(\"id-ID\", options);\n    }\n    showLoading() {\n        const loadingElement = document.getElementById(\"loading\");\n        loadingElement.style.display = \"block\";\n    }\n    hideLoading() {\n        const loadingElement = document.getElementById(\"loading\");\n        loadingElement.style.display = \"none\";\n    }\n    showError(message) {\n        document.getElementById(\"loading\").style.display = \"none\";\n        const errorContainer = document.getElementById(\"error-container\");\n        errorContainer.style.display = \"block\";\n        errorContainer.innerHTML = `\n      <div class=\"alert alert-danger\">\n        ${message}\n      </div>\n      <a href=\"#/home\">Back to Home</a>\n    `;\n    }\n    showSuccess(message) {\n        const errorContainer = document.getElementById(\"error-container\");\n        errorContainer.style.display = \"block\";\n        errorContainer.innerHTML = `\n      <div class=\"alert alert-success\">\n        ${message}\n      </div>\n    `;\n        // Auto-hide success message after 3 seconds\n        setTimeout(()=>{\n            errorContainer.style.display = \"none\";\n        }, 3000);\n    }\n}\nvar $e78702615a38e5f9$export$2e2bcd8739ae039 = $e78702615a38e5f9$var$DetailPage;\n\n\n\nclass $17e09030d242c98c$var$FavoritesPage {\n    constructor(container){\n        this._container = container;\n        this._indexedDBService = new (0, $838de00941db0e13$export$2e2bcd8739ae039)();\n        this._favoriteStories = [];\n    }\n    async render() {\n        this._container.innerHTML = `\n      <section class=\"page\" role=\"region\" aria-labelledby=\"favorites-title\">\n        <h2 id=\"favorites-title\">Favorite Stories</h2>\n        <div id=\"loading\" role=\"status\" aria-live=\"polite\">Loading favorite stories...</div>\n        <div id=\"error-container\" role=\"alert\" aria-live=\"assertive\" style=\"display:none;\"></div>\n        <div id=\"empty-state\" style=\"display:none;\">\n          <p>You haven't saved any favorite stories yet.</p>\n          <p><a href=\"#/home\">Browse stories</a> and click the heart icon to add them to your favorites.</p>\n        </div>\n        <div id=\"favorites-list\" class=\"story-list\"></div>\n        <div id=\"bulk-actions\" style=\"display:none;\">\n          <button id=\"clear-all-favorites\" type=\"button\">Clear All Favorites</button>\n        </div>\n      </section>\n    `;\n        await this._initIndexedDB();\n        await this._loadFavoriteStories();\n        this._renderFavoriteStories();\n        this._initBulkActions();\n    }\n    async _initIndexedDB() {\n        try {\n            await this._indexedDBService.init();\n        } catch (error) {\n            console.error(\"Failed to initialize IndexedDB:\", error);\n            this.showError(\"Failed to load favorites. Please try refreshing the page.\");\n        }\n    }\n    async _loadFavoriteStories() {\n        try {\n            this._favoriteStories = await this._indexedDBService.getFavoriteStories();\n            console.log(\"Loaded favorite stories:\", this._favoriteStories.length);\n        } catch (error) {\n            console.error(\"Failed to load favorite stories:\", error);\n            this.showError(\"Failed to load favorite stories.\");\n        }\n    }\n    _renderFavoriteStories() {\n        const loadingElement = document.getElementById(\"loading\");\n        const favoritesListElement = document.getElementById(\"favorites-list\");\n        const emptyStateElement = document.getElementById(\"empty-state\");\n        const bulkActionsElement = document.getElementById(\"bulk-actions\");\n        loadingElement.style.display = \"none\";\n        if (this._favoriteStories.length === 0) {\n            emptyStateElement.style.display = \"block\";\n            favoritesListElement.style.display = \"none\";\n            bulkActionsElement.style.display = \"none\";\n            return;\n        }\n        emptyStateElement.style.display = \"none\";\n        favoritesListElement.style.display = \"grid\";\n        bulkActionsElement.style.display = \"block\";\n        favoritesListElement.innerHTML = this._favoriteStories.sort((a, b)=>new Date(b.favoriteAt) - new Date(a.favoriteAt)).map((story)=>`\n      <article class=\"story-item\">\n        <img src=\"${story.photoUrl}\" alt=\"Photo by ${story.name}\" class=\"story-img\">\n        <div class=\"story-content\">\n          <h3>${story.name}</h3>\n          <p class=\"story-description\">${this._truncateText(story.description, 100)}</p>\n          <p class=\"story-date\">Added to favorites: ${this._formatDate(story.favoriteAt)}</p>\n          <div class=\"story-actions\">\n            <a href=\"#/detail/${story.id}\" class=\"story-link\">Read more</a>\n            <button \n              class=\"remove-favorite-btn\" \n              data-story-id=\"${story.id}\"\n              aria-label=\"Remove ${story.name} from favorites\"\n            >\n              Remove from Favorites\n            </button>\n          </div>\n        </div>\n      </article>\n    `).join(\"\");\n        this._initRemoveFavoriteButtons();\n    }\n    _initRemoveFavoriteButtons() {\n        const removeButtons = document.querySelectorAll(\".remove-favorite-btn\");\n        removeButtons.forEach((button)=>{\n            button.addEventListener(\"click\", async (e)=>{\n                e.preventDefault();\n                const storyId = button.dataset.storyId;\n                await this._removeFavoriteStory(storyId);\n            });\n        });\n    }\n    _initBulkActions() {\n        const clearAllButton = document.getElementById(\"clear-all-favorites\");\n        clearAllButton.addEventListener(\"click\", async ()=>{\n            const confirmed = confirm(\"Are you sure you want to remove all favorite stories?\");\n            if (confirmed) await this._clearAllFavorites();\n        });\n    }\n    async _removeFavoriteStory(storyId) {\n        try {\n            await this._indexedDBService.removeFavoriteStory(storyId);\n            // Remove from local array\n            this._favoriteStories = this._favoriteStories.filter((story)=>story.id !== storyId);\n            // Re-render the list\n            this._renderFavoriteStories();\n            this.showSuccess(\"Story removed from favorites\");\n        } catch (error) {\n            console.error(\"Failed to remove favorite story:\", error);\n            this.showError(\"Failed to remove story from favorites\");\n        }\n    }\n    async _clearAllFavorites() {\n        try {\n            // Remove all favorites one by one\n            for (const story of this._favoriteStories)await this._indexedDBService.removeFavoriteStory(story.id);\n            this._favoriteStories = [];\n            this._renderFavoriteStories();\n            this.showSuccess(\"All favorite stories removed\");\n        } catch (error) {\n            console.error(\"Failed to clear all favorites:\", error);\n            this.showError(\"Failed to clear favorite stories\");\n        }\n    }\n    _truncateText(text, maxLength) {\n        if (text.length <= maxLength) return text;\n        return text.substring(0, maxLength) + \"...\";\n    }\n    _formatDate(dateString) {\n        const options = {\n            year: \"numeric\",\n            month: \"short\",\n            day: \"numeric\",\n            hour: \"2-digit\",\n            minute: \"2-digit\"\n        };\n        return new Date(dateString).toLocaleDateString(\"id-ID\", options);\n    }\n    showLoading() {\n        const loadingElement = document.getElementById(\"loading\");\n        if (loadingElement) loadingElement.style.display = \"block\";\n    }\n    hideLoading() {\n        const loadingElement = document.getElementById(\"loading\");\n        if (loadingElement) loadingElement.style.display = \"none\";\n    }\n    showError(message) {\n        const errorContainer = document.getElementById(\"error-container\");\n        if (errorContainer) {\n            errorContainer.style.display = \"block\";\n            errorContainer.innerHTML = `\n        <div class=\"alert alert-danger\">\n          ${message}\n        </div>\n      `;\n        }\n    }\n    showSuccess(message) {\n        const errorContainer = document.getElementById(\"error-container\");\n        if (errorContainer) {\n            errorContainer.style.display = \"block\";\n            errorContainer.innerHTML = `\n        <div class=\"alert alert-success\">\n          ${message}\n        </div>\n      `;\n            // Auto-hide success message after 3 seconds\n            setTimeout(()=>{\n                errorContainer.style.display = \"none\";\n            }, 3000);\n        }\n    }\n}\nvar $17e09030d242c98c$export$2e2bcd8739ae039 = $17e09030d242c98c$var$FavoritesPage;\n\n\n\n\n\nconst $6b17f08f738443dc$var$API_BASE_URL = \"https://story-api.dicoding.dev/v1\";\nconst $6b17f08f738443dc$var$API_ENDPOINTS = {\n    register: `${$6b17f08f738443dc$var$API_BASE_URL}/register`,\n    login: `${$6b17f08f738443dc$var$API_BASE_URL}/login`,\n    stories: `${$6b17f08f738443dc$var$API_BASE_URL}/stories`,\n    guestStories: `${$6b17f08f738443dc$var$API_BASE_URL}/stories/guest`,\n    detailStory: (id)=>`${$6b17f08f738443dc$var$API_BASE_URL}/stories/${id}`,\n    subscribe: `${$6b17f08f738443dc$var$API_BASE_URL}/notifications/subscribe`,\n    unsubscribe: `${$6b17f08f738443dc$var$API_BASE_URL}/notifications/subscribe`\n};\nconst $6b17f08f738443dc$var$routes = {\n    \"/\": (0, $05a4d3ded1111bd8$export$2e2bcd8739ae039),\n    \"/home\": (0, $05a4d3ded1111bd8$export$2e2bcd8739ae039),\n    \"/add\": (0, $2a138afe4ef81a36$export$2e2bcd8739ae039),\n    \"/login\": (0, $d4e60c9d5a426170$export$2e2bcd8739ae039),\n    \"/register\": (0, $529e314e55a9390f$export$2e2bcd8739ae039),\n    \"/detail/:id\": (0, $e78702615a38e5f9$export$2e2bcd8739ae039),\n    \"/favorites\": (0, $17e09030d242c98c$export$2e2bcd8739ae039)\n};\nvar $a99b1c90995f445f$exports = {};\n$a99b1c90995f445f$exports = import.meta.resolve(\"czWhb\");\n\n\nclass $6b17f08f738443dc$var$App {\n    constructor(){\n        this._content = document.getElementById(\"main-content\");\n        this._loginMenu = document.getElementById(\"loginMenu\");\n        this._authService = new (0, $6b1c4fe551cd88bd$export$2e2bcd8739ae039)();\n        this._pushNotificationService = new (0, $044e26d168a7491a$export$2e2bcd8739ae039)();\n        this._indexedDBService = new (0, $838de00941db0e13$export$2e2bcd8739ae039)();\n        this._initApp();\n    }\n    async _initApp() {\n        await this._registerServiceWorker();\n        await this._initServices();\n        this._updateAuthMenu();\n        window.addEventListener(\"hashchange\", ()=>{\n            this._renderPage();\n        });\n        this._renderPage();\n    }\n    async _registerServiceWorker() {\n        if (\"serviceWorker\" in navigator) try {\n            const registration = await navigator.serviceWorker.register($a99b1c90995f445f$exports);\n            console.log(\"Service Worker registered successfully:\", registration);\n            // Handle service worker updates\n            registration.addEventListener(\"updatefound\", ()=>{\n                const newWorker = registration.installing;\n                newWorker.addEventListener(\"statechange\", ()=>{\n                    if (newWorker.state === \"installed\" && navigator.serviceWorker.controller) // New service worker available\n                    this._showUpdateNotification();\n                });\n            });\n        } catch (error) {\n            console.error(\"Service Worker registration failed:\", error);\n        }\n    }\n    async _initServices() {\n        try {\n            // Initialize IndexedDB\n            await this._indexedDBService.init();\n            // Initialize push notifications if user is logged in\n            if (this._authService.isLoggedIn()) await this._pushNotificationService.init();\n            // Setup install prompt\n            this._setupInstallPrompt();\n            // Setup offline/online detection\n            this._setupOfflineDetection();\n        } catch (error) {\n            console.error(\"Failed to initialize services:\", error);\n        }\n    }\n    _setupInstallPrompt() {\n        let deferredPrompt;\n        window.addEventListener(\"beforeinstallprompt\", (e)=>{\n            // Prevent the mini-infobar from appearing on mobile\n            e.preventDefault();\n            // Stash the event so it can be triggered later\n            deferredPrompt = e;\n            // Show install button\n            this._showInstallPrompt(deferredPrompt);\n        });\n        window.addEventListener(\"appinstalled\", ()=>{\n            console.log(\"PWA was installed\");\n            this._hideInstallPrompt();\n        });\n    }\n    _showInstallPrompt(deferredPrompt) {\n        const installPrompt = document.createElement(\"div\");\n        installPrompt.className = \"install-prompt\";\n        installPrompt.id = \"install-prompt\";\n        installPrompt.innerHTML = `\n      <p>\\u{1F4F1} Install Dicoding Story App for a better experience!</p>\n      <button id=\"install-app\">Install</button>\n      <button id=\"dismiss-install\">Later</button>\n    `;\n        document.body.appendChild(installPrompt);\n        document.getElementById(\"install-app\").addEventListener(\"click\", async ()=>{\n            // Show the install prompt\n            deferredPrompt.prompt();\n            // Wait for the user to respond to the prompt\n            const { outcome: outcome } = await deferredPrompt.userChoice;\n            console.log(`User response to the install prompt: ${outcome}`);\n            // Clear the deferred prompt variable\n            deferredPrompt = null;\n            this._hideInstallPrompt();\n        });\n        document.getElementById(\"dismiss-install\").addEventListener(\"click\", ()=>{\n            this._hideInstallPrompt();\n        });\n    }\n    _hideInstallPrompt() {\n        const installPrompt = document.getElementById(\"install-prompt\");\n        if (installPrompt) installPrompt.remove();\n    }\n    _setupOfflineDetection() {\n        const showOfflineIndicator = ()=>{\n            if (!document.getElementById(\"offline-indicator\")) {\n                const indicator = document.createElement(\"div\");\n                indicator.id = \"offline-indicator\";\n                indicator.className = \"offline-indicator\";\n                indicator.textContent = \"\\uD83D\\uDCF6 You are offline. Some features may be limited.\";\n                document.body.appendChild(indicator);\n            }\n        };\n        const hideOfflineIndicator = ()=>{\n            const indicator = document.getElementById(\"offline-indicator\");\n            if (indicator) indicator.remove();\n        };\n        window.addEventListener(\"online\", hideOfflineIndicator);\n        window.addEventListener(\"offline\", showOfflineIndicator);\n        // Check initial state\n        if (!navigator.onLine) showOfflineIndicator();\n    }\n    _showUpdateNotification() {\n        // Show a notification that the app has been updated\n        const updateBanner = document.createElement(\"div\");\n        updateBanner.className = \"update-banner\";\n        updateBanner.innerHTML = `\n      <div class=\"alert alert-info\">\n        <p>A new version is available! \n        <button id=\"refresh-app\">Refresh to update</button>\n        <button id=\"dismiss-update\">Dismiss</button></p>\n      </div>\n    `;\n        document.body.insertBefore(updateBanner, document.body.firstChild);\n        document.getElementById(\"refresh-app\").addEventListener(\"click\", ()=>{\n            window.location.reload();\n        });\n        document.getElementById(\"dismiss-update\").addEventListener(\"click\", ()=>{\n            updateBanner.remove();\n        });\n    }\n    _updateAuthMenu() {\n        const isLoggedIn = this._authService.isLoggedIn();\n        const username = this._authService.getUserName();\n        if (isLoggedIn) {\n            this._loginMenu.textContent = `Logout (${username || \"User\"})`;\n            this._loginMenu.href = \"#/home\";\n            this._loginMenu.setAttribute(\"aria-label\", \"Logout from your account\");\n            const oldClone = this._loginMenu.cloneNode(true);\n            this._loginMenu.parentNode.replaceChild(oldClone, this._loginMenu);\n            this._loginMenu = oldClone;\n            this._loginMenu.addEventListener(\"click\", (e)=>{\n                e.preventDefault();\n                this._authService.logout();\n                this._updateAuthMenu();\n                window.location.hash = \"#/home\";\n            });\n        } else {\n            this._loginMenu.textContent = \"Login\";\n            this._loginMenu.href = \"#/login\";\n            this._loginMenu.setAttribute(\"aria-label\", \"Go to login page\");\n            const oldClone = this._loginMenu.cloneNode(true);\n            this._loginMenu.parentNode.replaceChild(oldClone, this._loginMenu);\n            this._loginMenu = oldClone;\n        }\n    }\n    async _renderPage() {\n        if (document.startViewTransition) document.startViewTransition(()=>this._updateDOM());\n        else this._updateDOM();\n    }\n    async _updateDOM() {\n        const hash = window.location.hash.slice(1).toLowerCase() || \"/\";\n        const url = this._parseActiveUrl(hash);\n        const page = this._getPage(url);\n        try {\n            this._content.innerHTML = \"\";\n            if (this._routeRequiresAuth(url.resource) && !this._authService.isLoggedIn()) {\n                window.location.hash = \"#/login\";\n                return;\n            }\n            const view = new page(this._content, url.id);\n            await view.render();\n            this._updateAuthMenu();\n            this._content.focus();\n        } catch (error) {\n            console.error(\"Error rendering page:\", error);\n            this._showErrorPage(error);\n        }\n    }\n    _showErrorPage(error) {\n        this._content.innerHTML = `\n      <section class=\"page error-page\" role=\"alert\">\n        <h2>Oops! Something went wrong</h2>\n        <p>${error.message || \"Unknown error occurred\"}</p>\n        <a href=\"#/home\" class=\"btn\">Back to Home</a>\n      </section>\n    `;\n    }\n    _parseActiveUrl(url) {\n        const splitedUrl = url.split(\"/\");\n        return {\n            resource: `/${splitedUrl[1] || \"\"}`,\n            id: splitedUrl[2] || null\n        };\n    }\n    _getPage(url) {\n        let page;\n        if (url.id) {\n            const idParameterRoute = Object.keys($6b17f08f738443dc$var$routes).find((route)=>route.includes(\"/:id\"));\n            if (idParameterRoute) {\n                const baseRoute = idParameterRoute.replace(\"/:id\", \"\");\n                if (url.resource === baseRoute) page = $6b17f08f738443dc$var$routes[idParameterRoute];\n            }\n        } else page = $6b17f08f738443dc$var$routes[url.resource];\n        return page || $6b17f08f738443dc$var$routes[\"/\"];\n    }\n    _routeRequiresAuth(resource) {\n        return [\n            \"/add\"\n        ].includes(resource);\n    }\n}\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    new $6b17f08f738443dc$var$App();\n});\n\n\n//# sourceMappingURL=dicoding-story.24a46f21.js.map\n","const API_BASE_URL = \"https://story-api.dicoding.dev/v1\";\r\n\r\nconst API_ENDPOINTS = {\r\n  register: `${API_BASE_URL}/register`,\r\n  login: `${API_BASE_URL}/login`,\r\n  stories: `${API_BASE_URL}/stories`,\r\n  guestStories: `${API_BASE_URL}/stories/guest`,\r\n  detailStory: (id) => `${API_BASE_URL}/stories/${id}`,\r\n  subscribe: `${API_BASE_URL}/notifications/subscribe`,\r\n  unsubscribe: `${API_BASE_URL}/notifications/subscribe`,\r\n};\r\n\r\nimport HomePage from \"./views/home-page.js\";\r\nimport AddStoryPage from \"./views/add-story-page.js\";\r\nimport LoginPage from \"./views/login-page.js\";\r\nimport RegisterPage from \"./views/register-page.js\";\r\nimport DetailPage from \"./views/detail-page.js\";\r\nimport FavoritesPage from \"./views/favorites-page.js\";\r\n\r\nimport AuthService from \"./services/auth-service.js\";\r\nimport PushNotificationService from \"./services/push-notification-service.js\";\r\nimport IndexedDBService from \"./services/indexeddb-service.js\";\r\n\r\nconst routes = {\r\n  \"/\": HomePage,\r\n  \"/home\": HomePage,\r\n  \"/add\": AddStoryPage,\r\n  \"/login\": LoginPage,\r\n  \"/register\": RegisterPage,\r\n  \"/detail/:id\": DetailPage,\r\n  \"/favorites\": FavoritesPage,\r\n};\r\n\r\nclass App {\r\n  constructor() {\r\n    this._content = document.getElementById(\"main-content\");\r\n    this._loginMenu = document.getElementById(\"loginMenu\");\r\n    this._authService = new AuthService();\r\n    this._pushNotificationService = new PushNotificationService();\r\n    this._indexedDBService = new IndexedDBService();\r\n\r\n    this._initApp();\r\n  }\r\n\r\n  async _initApp() {\r\n    await this._registerServiceWorker();\r\n    await this._initServices();\r\n    this._updateAuthMenu();\r\n\r\n    window.addEventListener(\"hashchange\", () => {\r\n      this._renderPage();\r\n    });\r\n\r\n    this._renderPage();\r\n  }\r\n  async _registerServiceWorker() {\r\n    if (\"serviceWorker\" in navigator) {\r\n      try {\r\n        const registration = await navigator.serviceWorker.register(\r\n          new URL(\"./sw.js\", import.meta.url)\r\n        );\r\n        console.log(\"Service Worker registered successfully:\", registration);\r\n\r\n        // Handle service worker updates\r\n        registration.addEventListener(\"updatefound\", () => {\r\n          const newWorker = registration.installing;\r\n          newWorker.addEventListener(\"statechange\", () => {\r\n            if (\r\n              newWorker.state === \"installed\" &&\r\n              navigator.serviceWorker.controller\r\n            ) {\r\n              // New service worker available\r\n              this._showUpdateNotification();\r\n            }\r\n          });\r\n        });\r\n      } catch (error) {\r\n        console.error(\"Service Worker registration failed:\", error);\r\n      }\r\n    }\r\n  }\r\n  async _initServices() {\r\n    try {\r\n      // Initialize IndexedDB\r\n      await this._indexedDBService.init();\r\n\r\n      // Initialize push notifications if user is logged in\r\n      if (this._authService.isLoggedIn()) {\r\n        await this._pushNotificationService.init();\r\n      }\r\n\r\n      // Setup install prompt\r\n      this._setupInstallPrompt();\r\n\r\n      // Setup offline/online detection\r\n      this._setupOfflineDetection();\r\n    } catch (error) {\r\n      console.error(\"Failed to initialize services:\", error);\r\n    }\r\n  }\r\n\r\n  _setupInstallPrompt() {\r\n    let deferredPrompt;\r\n\r\n    window.addEventListener(\"beforeinstallprompt\", (e) => {\r\n      // Prevent the mini-infobar from appearing on mobile\r\n      e.preventDefault();\r\n      // Stash the event so it can be triggered later\r\n      deferredPrompt = e;\r\n      // Show install button\r\n      this._showInstallPrompt(deferredPrompt);\r\n    });\r\n\r\n    window.addEventListener(\"appinstalled\", () => {\r\n      console.log(\"PWA was installed\");\r\n      this._hideInstallPrompt();\r\n    });\r\n  }\r\n\r\n  _showInstallPrompt(deferredPrompt) {\r\n    const installPrompt = document.createElement(\"div\");\r\n    installPrompt.className = \"install-prompt\";\r\n    installPrompt.id = \"install-prompt\";\r\n    installPrompt.innerHTML = `\r\n      <p>📱 Install Dicoding Story App for a better experience!</p>\r\n      <button id=\"install-app\">Install</button>\r\n      <button id=\"dismiss-install\">Later</button>\r\n    `;\r\n\r\n    document.body.appendChild(installPrompt);\r\n\r\n    document\r\n      .getElementById(\"install-app\")\r\n      .addEventListener(\"click\", async () => {\r\n        // Show the install prompt\r\n        deferredPrompt.prompt();\r\n        // Wait for the user to respond to the prompt\r\n        const { outcome } = await deferredPrompt.userChoice;\r\n        console.log(`User response to the install prompt: ${outcome}`);\r\n        // Clear the deferred prompt variable\r\n        deferredPrompt = null;\r\n        this._hideInstallPrompt();\r\n      });\r\n\r\n    document.getElementById(\"dismiss-install\").addEventListener(\"click\", () => {\r\n      this._hideInstallPrompt();\r\n    });\r\n  }\r\n\r\n  _hideInstallPrompt() {\r\n    const installPrompt = document.getElementById(\"install-prompt\");\r\n    if (installPrompt) {\r\n      installPrompt.remove();\r\n    }\r\n  }\r\n\r\n  _setupOfflineDetection() {\r\n    const showOfflineIndicator = () => {\r\n      if (!document.getElementById(\"offline-indicator\")) {\r\n        const indicator = document.createElement(\"div\");\r\n        indicator.id = \"offline-indicator\";\r\n        indicator.className = \"offline-indicator\";\r\n        indicator.textContent =\r\n          \"📶 You are offline. Some features may be limited.\";\r\n        document.body.appendChild(indicator);\r\n      }\r\n    };\r\n\r\n    const hideOfflineIndicator = () => {\r\n      const indicator = document.getElementById(\"offline-indicator\");\r\n      if (indicator) {\r\n        indicator.remove();\r\n      }\r\n    };\r\n\r\n    window.addEventListener(\"online\", hideOfflineIndicator);\r\n    window.addEventListener(\"offline\", showOfflineIndicator);\r\n\r\n    // Check initial state\r\n    if (!navigator.onLine) {\r\n      showOfflineIndicator();\r\n    }\r\n  }\r\n\r\n  _showUpdateNotification() {\r\n    // Show a notification that the app has been updated\r\n    const updateBanner = document.createElement(\"div\");\r\n    updateBanner.className = \"update-banner\";\r\n    updateBanner.innerHTML = `\r\n      <div class=\"alert alert-info\">\r\n        <p>A new version is available! \r\n        <button id=\"refresh-app\">Refresh to update</button>\r\n        <button id=\"dismiss-update\">Dismiss</button></p>\r\n      </div>\r\n    `;\r\n\r\n    document.body.insertBefore(updateBanner, document.body.firstChild);\r\n\r\n    document.getElementById(\"refresh-app\").addEventListener(\"click\", () => {\r\n      window.location.reload();\r\n    });\r\n\r\n    document.getElementById(\"dismiss-update\").addEventListener(\"click\", () => {\r\n      updateBanner.remove();\r\n    });\r\n  }\r\n\r\n  _updateAuthMenu() {\r\n    const isLoggedIn = this._authService.isLoggedIn();\r\n    const username = this._authService.getUserName();\r\n\r\n    if (isLoggedIn) {\r\n      this._loginMenu.textContent = `Logout (${username || \"User\"})`;\r\n      this._loginMenu.href = \"#/home\";\r\n      this._loginMenu.setAttribute(\"aria-label\", \"Logout from your account\");\r\n\r\n      const oldClone = this._loginMenu.cloneNode(true);\r\n      this._loginMenu.parentNode.replaceChild(oldClone, this._loginMenu);\r\n      this._loginMenu = oldClone;\r\n\r\n      this._loginMenu.addEventListener(\"click\", (e) => {\r\n        e.preventDefault();\r\n        this._authService.logout();\r\n        this._updateAuthMenu();\r\n        window.location.hash = \"#/home\";\r\n      });\r\n    } else {\r\n      this._loginMenu.textContent = \"Login\";\r\n      this._loginMenu.href = \"#/login\";\r\n      this._loginMenu.setAttribute(\"aria-label\", \"Go to login page\");\r\n\r\n      const oldClone = this._loginMenu.cloneNode(true);\r\n      this._loginMenu.parentNode.replaceChild(oldClone, this._loginMenu);\r\n      this._loginMenu = oldClone;\r\n    }\r\n  }\r\n\r\n  async _renderPage() {\r\n    if (document.startViewTransition) {\r\n      document.startViewTransition(() => this._updateDOM());\r\n    } else {\r\n      this._updateDOM();\r\n    }\r\n  }\r\n\r\n  async _updateDOM() {\r\n    const hash = window.location.hash.slice(1).toLowerCase() || \"/\";\r\n    const url = this._parseActiveUrl(hash);\r\n    const page = this._getPage(url);\r\n\r\n    try {\r\n      this._content.innerHTML = \"\";\r\n\r\n      if (\r\n        this._routeRequiresAuth(url.resource) &&\r\n        !this._authService.isLoggedIn()\r\n      ) {\r\n        window.location.hash = \"#/login\";\r\n        return;\r\n      }\r\n\r\n      const view = new page(this._content, url.id);\r\n      await view.render();\r\n\r\n      this._updateAuthMenu();\r\n\r\n      this._content.focus();\r\n    } catch (error) {\r\n      console.error(\"Error rendering page:\", error);\r\n      this._showErrorPage(error);\r\n    }\r\n  }\r\n\r\n  _showErrorPage(error) {\r\n    this._content.innerHTML = `\r\n      <section class=\"page error-page\" role=\"alert\">\r\n        <h2>Oops! Something went wrong</h2>\r\n        <p>${error.message || \"Unknown error occurred\"}</p>\r\n        <a href=\"#/home\" class=\"btn\">Back to Home</a>\r\n      </section>\r\n    `;\r\n  }\r\n\r\n  _parseActiveUrl(url) {\r\n    const splitedUrl = url.split(\"/\");\r\n    return {\r\n      resource: `/${splitedUrl[1] || \"\"}`,\r\n      id: splitedUrl[2] || null,\r\n    };\r\n  }\r\n\r\n  _getPage(url) {\r\n    let page;\r\n\r\n    if (url.id) {\r\n      const idParameterRoute = Object.keys(routes).find((route) =>\r\n        route.includes(\"/:id\")\r\n      );\r\n\r\n      if (idParameterRoute) {\r\n        const baseRoute = idParameterRoute.replace(\"/:id\", \"\");\r\n        if (url.resource === baseRoute) {\r\n          page = routes[idParameterRoute];\r\n        }\r\n      }\r\n    } else {\r\n      page = routes[url.resource];\r\n    }\r\n\r\n    return page || routes[\"/\"];\r\n  }\r\n\r\n  _routeRequiresAuth(resource) {\r\n    return [\"/add\"].includes(resource);\r\n  }\r\n}\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", () => {\r\n  new App();\r\n});\r\n","import StoryPresenter from \"../presenters/story-presenter.js\";\nimport IndexedDBService from \"../services/indexeddb-service.js\";\n\nclass HomePage {\n  constructor(container) {\n    this._container = container;\n    this._presenter = new StoryPresenter(this);\n    this._indexedDBService = new IndexedDBService();\n    this._stories = [];\n    this._map = null;\n  }\n\n  async render() {\n    this._container.innerHTML = `\n      <section class=\"page\" role=\"region\" aria-labelledby=\"home-title\">\n        <h2 id=\"home-title\">Latest Stories</h2>\n        <div id=\"loading\" role=\"status\" aria-live=\"polite\">Loading stories...</div>\n        <div id=\"error-container\" role=\"alert\" aria-live=\"assertive\" style=\"display:none;\"></div>\n        <div id=\"map\" aria-label=\"Map showing story locations\"></div>\n        <div id=\"story-list\" class=\"story-list\"></div>\n      </section>\n    `;\n\n    await this._initIndexedDB();\n    await this._fetchStories();\n    this._initMap();\n    this._renderStories();\n  }\n\n  async _initIndexedDB() {\n    try {\n      await this._indexedDBService.init();\n    } catch (error) {\n      console.error(\"Failed to initialize IndexedDB:\", error);\n    }\n  }\n\n  async _fetchStories() {\n    this._stories = await this._presenter.getStories(1, 10, 1);\n  }\n\n  async _renderStories() {\n    const storyListElement = document.getElementById(\"story-list\");\n    const loadingElement = document.getElementById(\"loading\");\n\n    loadingElement.style.display = \"none\";\n\n    if (this._stories.length === 0) {\n      storyListElement.innerHTML =\n        \"<p>No stories found. Please login to see stories or add new ones.</p>\";\n      return;\n    }\n\n    // Cache stories for offline viewing\n    for (const story of this._stories) {\n      try {\n        await this._indexedDBService.cacheStory(story);\n      } catch (error) {\n        console.error(\"Failed to cache story:\", error);\n      }\n    }\n\n    storyListElement.innerHTML = await Promise.all(\n      this._stories.map(async (story) => {\n        const isFavorite = await this._checkIfFavorite(story.id);\n        return `\n      <article class=\"story-item\">\n        <img src=\"${story.photoUrl}\" alt=\"Photo by ${\n          story.name\n        }\" class=\"story-img\">\n        <div class=\"story-content\">\n          <h3>${story.name}</h3>\n          <p class=\"story-description\">${this._truncateText(\n            story.description,\n            100\n          )}</p>\n          <p class=\"story-date\">${this._formatDate(story.createdAt)}</p>\n          <div class=\"story-actions\">\n            <a href=\"#/detail/${story.id}\" class=\"story-link\">Read more</a>\n            <button \n              class=\"favorite-btn ${isFavorite ? \"is-favorite\" : \"\"}\" \n              data-story-id=\"${story.id}\"\n              aria-label=\"${\n                isFavorite ? \"Remove from favorites\" : \"Add to favorites\"\n              }\"\n            >\n              ${isFavorite ? \"❤️ Remove from Favorites\" : \"🤍 Add to Favorites\"}\n            </button>\n          </div>\n        </div>\n      </article>\n    `;\n      })\n    ).then((storyHtmlArray) => storyHtmlArray.join(\"\"));\n\n    this._initFavoriteButtons();\n  }\n\n  async _checkIfFavorite(storyId) {\n    try {\n      return await this._indexedDBService.isFavoriteStory(storyId);\n    } catch (error) {\n      console.error(\"Failed to check favorite status:\", error);\n      return false;\n    }\n  }\n\n  _initFavoriteButtons() {\n    const favoriteButtons = document.querySelectorAll(\".favorite-btn\");\n\n    favoriteButtons.forEach((button) => {\n      button.addEventListener(\"click\", async (e) => {\n        e.preventDefault();\n        const storyId = button.dataset.storyId;\n        const isFavorite = button.classList.contains(\"is-favorite\");\n\n        try {\n          if (isFavorite) {\n            await this._removeFavorite(storyId, button);\n          } else {\n            await this._addFavorite(storyId, button);\n          }\n        } catch (error) {\n          console.error(\"Failed to update favorite:\", error);\n          this.showError(\"Failed to update favorite status\");\n        }\n      });\n    });\n  }\n\n  async _addFavorite(storyId, button) {\n    const story = this._stories.find((s) => s.id === storyId);\n    if (!story) return;\n\n    await this._indexedDBService.addFavoriteStory(story);\n\n    button.classList.add(\"is-favorite\");\n    button.textContent = \"❤️ Remove from Favorites\";\n    button.setAttribute(\"aria-label\", \"Remove from favorites\");\n\n    this.showSuccess(\"Story added to favorites!\");\n  }\n\n  async _removeFavorite(storyId, button) {\n    await this._indexedDBService.removeFavoriteStory(storyId);\n\n    button.classList.remove(\"is-favorite\");\n    button.textContent = \"🤍 Add to Favorites\";\n    button.setAttribute(\"aria-label\", \"Add to favorites\");\n\n    this.showSuccess(\"Story removed from favorites!\");\n  }\n\n  _initMap() {\n    this._map = L.map(\"map\").setView([0, 0], 2);\n\n    L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n      attribution:\n        '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n    }).addTo(this._map);\n\n    this._stories.forEach((story) => {\n      if (story.lat && story.lon) {\n        const marker = L.marker([story.lat, story.lon]).addTo(this._map);\n\n        marker.bindPopup(`\n          <div class=\"map-popup\">\n            <img src=\"${story.photoUrl}\" alt=\"Photo by ${story.name}\">\n            <h3>${story.name}</h3>\n            <p>${this._truncateText(story.description, 50)}</p>\n            <a href=\"#/detail/${story.id}\">View Story</a>\n          </div>\n        `);\n      }\n    });\n  }\n\n  _truncateText(text, maxLength) {\n    if (text.length <= maxLength) return text;\n    return text.substring(0, maxLength) + \"...\";\n  }\n\n  _formatDate(dateString) {\n    const options = { year: \"numeric\", month: \"short\", day: \"numeric\" };\n    return new Date(dateString).toLocaleDateString(\"id-ID\", options);\n  }\n\n  showLoading() {\n    const loadingElement = document.getElementById(\"loading\");\n    loadingElement.style.display = \"block\";\n  }\n\n  hideLoading() {\n    const loadingElement = document.getElementById(\"loading\");\n    loadingElement.style.display = \"none\";\n  }\n\n  showError(message) {\n    const errorContainer = document.getElementById(\"error-container\");\n    errorContainer.style.display = \"block\";\n    errorContainer.innerHTML = `\n      <div class=\"alert alert-danger\">\n        ${message}\n      </div>\n    `;\n  }\n\n  showSuccess(message) {\n    const errorContainer = document.getElementById(\"error-container\");\n    errorContainer.style.display = \"block\";\n    errorContainer.innerHTML = `\n      <div class=\"alert alert-success\">\n        ${message}\n      </div>\n    `;\n\n    // Auto-hide success message after 3 seconds\n    setTimeout(() => {\n      errorContainer.style.display = \"none\";\n    }, 3000);\n  }\n}\n\nexport default HomePage;\n","import BasePresenter from \"./base-presenter.js\";\nimport StoryModel from \"../models/story-model.js\"; // Impor StoryModel\n\nclass StoryPresenter extends BasePresenter {\n  constructor(view) {\n    super(view);\n    this._storyModel = new StoryModel(); // Gunakan StoryModel\n  }\n\n  async getStories(page = 1, size = 10, location = 1) {\n    try {\n      this._view.showLoading();\n      const stories = await this._storyModel.getStories(page, size, location);\n      return stories;\n    } catch (error) {\n      this._view.showError(`Failed to load stories: ${error.message}`);\n      return [];\n    } finally {\n      this._view.hideLoading();\n    }\n  }\n\n  async getStoryDetail(id) {\n    try {\n      this._view.showLoading();\n      const story = await this._storyModel.getStoryDetail(id);\n      return story;\n    } catch (error) {\n      this._view.showError(`Failed to load story: ${error.message}`);\n      throw error;\n    } finally {\n      this._view.hideLoading();\n    }\n  }\n\n  async addStory(description, photoBlob, lat, lon) {\n    try {\n      this._view.showLoading();\n      const result = await this._storyModel.addStory(\n        description,\n        photoBlob,\n        lat,\n        lon\n      );\n      this._view.showSuccess(\n        \"Story added successfully. Redirecting to home page...\"\n      );\n      return result;\n    } catch (error) {\n      this._view.showError(`Failed to add story: ${error.message}`);\n      throw error;\n    } finally {\n      this._view.hideLoading();\n    }\n  }\n}\n\nexport default StoryPresenter;\n","class BasePresenter {\n  constructor(view) {\n    this._view = view;\n  }\n\n  init() {}\n\n  handleError(error, defaultMessage = \"An error occurred\") {\n    const message = error.message || defaultMessage;\n\n    if (this._view && typeof this._view.showError === \"function\") {\n      this._view.showError(message);\n    }\n\n    console.error(\"Presenter error:\", error);\n    return message;\n  }\n}\n\nexport default BasePresenter;\n","import ApiService from \"../services/api-service.js\";\r\n\r\nclass StoryModel {\r\n  constructor() {\r\n    this._apiService = new ApiService();\r\n  }\r\n\r\n  async getStories(page = 1, size = 10, location = 1) {\r\n    const stories = await this._apiService.getStories(page, size, location);\r\n    return stories;\r\n  }\r\n\r\n  async getStoryDetail(id) {\r\n    const story = await this._apiService.getStoryDetail(id);\r\n    return story;\r\n  }\r\n\r\n  async addStory(description, photoBlob, lat, lon) {\r\n    const result = await this._apiService.addStory(\r\n      description,\r\n      photoBlob,\r\n      lat,\r\n      lon\r\n    );\r\n    return result;\r\n  }\r\n}\r\n\r\nexport default StoryModel;\r\n","import AuthService from \"./auth-service.js\";\r\n\r\nclass ApiService {\r\n  constructor() {\r\n    this._baseUrl = \"https://story-api.dicoding.dev/v1\";\r\n    this._authService = new AuthService();\r\n  }\r\n\r\n  _getAuthHeader() {\r\n    const token = this._authService.getToken();\r\n    console.log(\"Auth token: \" + token);\r\n    return token ? { Authorization: `Bearer ${token}` } : {};\r\n  }\r\n\r\n  async register(name, email, password) {\r\n    try {\r\n      const response = await fetch(`${this._baseUrl}/register`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ name, email, password }),\r\n      });\r\n\r\n      const responseJson = await response.json();\r\n\r\n      if (responseJson.error) {\r\n        throw new Error(responseJson.message);\r\n      }\r\n\r\n      return responseJson;\r\n    } catch (error) {\r\n      throw new Error(`Register failed: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async login(email, password) {\r\n    try {\r\n      const response = await fetch(`${this._baseUrl}/login`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ email, password }),\r\n      });\r\n\r\n      const responseJson = await response.json();\r\n\r\n      if (responseJson.error) {\r\n        throw new Error(responseJson.message);\r\n      }\r\n\r\n      this._authService.setAuth({\r\n        token: responseJson.loginResult.token,\r\n        name: responseJson.loginResult.name,\r\n        userId: responseJson.loginResult.userId,\r\n      });\r\n\r\n      return responseJson;\r\n    } catch (error) {\r\n      throw new Error(`Login failed: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async getStories(page = 1, size = 10, location = 1) {\r\n    try {\r\n      const url = new URL(`${this._baseUrl}/stories`);\r\n      url.searchParams.append(\"page\", page);\r\n      url.searchParams.append(\"size\", size);\r\n      url.searchParams.append(\"location\", location);\r\n\r\n      const response = await fetch(url, {\r\n        headers: this._getAuthHeader(),\r\n      });\r\n\r\n      const responseJson = await response.json();\r\n\r\n      if (responseJson.error) {\r\n        throw new Error(responseJson.message);\r\n      }\r\n\r\n      return responseJson.listStory;\r\n    } catch (error) {\r\n      if (!this._authService.isLoggedIn()) {\r\n        return this._getStoriesAsGuest();\r\n      }\r\n\r\n      throw new Error(`Failed to get stories: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async _getStoriesAsGuest() {\r\n    try {\r\n      return [];\r\n    } catch (error) {\r\n      throw new Error(`Failed to get stories as guest: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async getStoryDetail(id) {\r\n    try {\r\n      const response = await fetch(`${this._baseUrl}/stories/${id}`, {\r\n        headers: this._getAuthHeader(),\r\n      });\r\n\r\n      const responseJson = await response.json();\r\n\r\n      if (responseJson.error) {\r\n        throw new Error(responseJson.message);\r\n      }\r\n\r\n      return responseJson.story;\r\n    } catch (error) {\r\n      throw new Error(`Failed to get story detail: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async addStory(description, photoBlob, lat, lon) {\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append(\"description\", description);\r\n      formData.append(\"photo\", photoBlob);\r\n\r\n      if (lat && lon) {\r\n        formData.append(\"lat\", lat);\r\n        formData.append(\"lon\", lon);\r\n      }\r\n\r\n      const endpoint = this._authService.isLoggedIn()\r\n        ? `${this._baseUrl}/stories`\r\n        : `${this._baseUrl}/stories/guest`;\r\n\r\n      const headers = this._authService.isLoggedIn()\r\n        ? this._getAuthHeader()\r\n        : {};\r\n\r\n      const response = await fetch(endpoint, {\r\n        method: \"POST\",\r\n        headers,\r\n        body: formData,\r\n      });\r\n\r\n      const responseJson = await response.json();\r\n\r\n      if (responseJson.error) {\r\n        throw new Error(responseJson.message);\r\n      }\r\n\r\n      return responseJson;\r\n    } catch (error) {\r\n      throw new Error(`Failed to add story: ${error.message}`);\r\n    }\r\n  }\r\n}\r\n\r\nexport default ApiService;\r\n","\r\nclass AuthService {\r\n  constructor() {\r\n    this._storageKey = \"dicodingStoryAuth\";\r\n  }\r\n\r\n\r\n  setAuth(data) {\r\n    localStorage.setItem(this._storageKey, JSON.stringify(data));\r\n  }\r\n\r\n\r\n  getAuth() {\r\n    const data = localStorage.getItem(this._storageKey);\r\n    return data ? JSON.parse(data) : null;\r\n  }\r\n\r\n\r\n  isLoggedIn() {\r\n    return !!this.getAuth();\r\n  }\r\n\r\n\r\n  getToken() {\r\n    const auth = this.getAuth();\r\n    return auth ? auth.token : null;\r\n  }\r\n\r\n\r\n  getUserName() {\r\n    const auth = this.getAuth();\r\n    return auth ? auth.name : null;\r\n  }\r\n\r\n\r\n  logout() {\r\n    localStorage.removeItem(this._storageKey);\r\n  }\r\n}\r\n\r\nexport default AuthService;\r\n","class IndexedDBService {\r\n  constructor() {\r\n    this.dbName = \"dicoding-story-db\";\r\n    this.dbVersion = 1;\r\n    this.db = null;\r\n  }\r\n\r\n  async init() {\r\n    return new Promise((resolve, reject) => {\r\n      const request = indexedDB.open(this.dbName, this.dbVersion);\r\n\r\n      request.onerror = () => {\r\n        console.error(\"Failed to open IndexedDB:\", request.error);\r\n        reject(request.error);\r\n      };\r\n\r\n      request.onsuccess = () => {\r\n        this.db = request.result;\r\n        console.log(\"IndexedDB opened successfully\");\r\n        resolve(this.db);\r\n      };\r\n\r\n      request.onupgradeneeded = (event) => {\r\n        this.db = event.target.result;\r\n        this.createObjectStores();\r\n      };\r\n    });\r\n  }\r\n\r\n  createObjectStores() {\r\n    // Store for favorite stories\r\n    if (!this.db.objectStoreNames.contains(\"favorite-stories\")) {\r\n      const favoriteStore = this.db.createObjectStore(\"favorite-stories\", {\r\n        keyPath: \"id\",\r\n      });\r\n      favoriteStore.createIndex(\"createdAt\", \"createdAt\", { unique: false });\r\n    }\r\n\r\n    // Store for offline stories (pending upload)\r\n    if (!this.db.objectStoreNames.contains(\"offline-stories\")) {\r\n      const offlineStore = this.db.createObjectStore(\"offline-stories\", {\r\n        keyPath: \"id\",\r\n        autoIncrement: true,\r\n      });\r\n      offlineStore.createIndex(\"timestamp\", \"timestamp\", { unique: false });\r\n    }\r\n\r\n    // Store for cached stories for offline viewing\r\n    if (!this.db.objectStoreNames.contains(\"cached-stories\")) {\r\n      const cachedStore = this.db.createObjectStore(\"cached-stories\", {\r\n        keyPath: \"id\",\r\n      });\r\n      cachedStore.createIndex(\"cachedAt\", \"cachedAt\", { unique: false });\r\n    }\r\n\r\n    console.log(\"Object stores created successfully\");\r\n  }\r\n\r\n  // Favorite Stories Operations\r\n  async addFavoriteStory(story) {\r\n    try {\r\n      const transaction = this.db.transaction(\r\n        [\"favorite-stories\"],\r\n        \"readwrite\"\r\n      );\r\n      const store = transaction.objectStore(\"favorite-stories\");\r\n\r\n      const favoriteStory = {\r\n        ...story,\r\n        favoriteAt: new Date().toISOString(),\r\n      };\r\n\r\n      await this.executeTransaction(store.add(favoriteStory));\r\n      console.log(\"Story added to favorites:\", story.id);\r\n      return true;\r\n    } catch (error) {\r\n      console.error(\"Failed to add favorite story:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async removeFavoriteStory(storyId) {\r\n    try {\r\n      const transaction = this.db.transaction(\r\n        [\"favorite-stories\"],\r\n        \"readwrite\"\r\n      );\r\n      const store = transaction.objectStore(\"favorite-stories\");\r\n\r\n      await this.executeTransaction(store.delete(storyId));\r\n      console.log(\"Story removed from favorites:\", storyId);\r\n      return true;\r\n    } catch (error) {\r\n      console.error(\"Failed to remove favorite story:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getFavoriteStories() {\r\n    try {\r\n      const transaction = this.db.transaction([\"favorite-stories\"], \"readonly\");\r\n      const store = transaction.objectStore(\"favorite-stories\");\r\n\r\n      const result = await this.executeTransaction(store.getAll());\r\n      console.log(\"Retrieved favorite stories:\", result.length);\r\n      return result;\r\n    } catch (error) {\r\n      console.error(\"Failed to get favorite stories:\", error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  async isFavoriteStory(storyId) {\r\n    try {\r\n      const transaction = this.db.transaction([\"favorite-stories\"], \"readonly\");\r\n      const store = transaction.objectStore(\"favorite-stories\");\r\n\r\n      const result = await this.executeTransaction(store.get(storyId));\r\n      return !!result;\r\n    } catch (error) {\r\n      console.error(\"Failed to check favorite story:\", error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Offline Stories Operations\r\n  async addOfflineStory(description, photoBlob, lat, lon) {\r\n    try {\r\n      const transaction = this.db.transaction([\"offline-stories\"], \"readwrite\");\r\n      const store = transaction.objectStore(\"offline-stories\");\r\n\r\n      const offlineStory = {\r\n        description,\r\n        photoBlob,\r\n        lat,\r\n        lon,\r\n        timestamp: new Date().toISOString(),\r\n        synced: false,\r\n      };\r\n\r\n      const result = await this.executeTransaction(store.add(offlineStory));\r\n      console.log(\"Offline story added:\", result);\r\n      return result;\r\n    } catch (error) {\r\n      console.error(\"Failed to add offline story:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getOfflineStories() {\r\n    try {\r\n      const transaction = this.db.transaction([\"offline-stories\"], \"readonly\");\r\n      const store = transaction.objectStore(\"offline-stories\");\r\n\r\n      const result = await this.executeTransaction(store.getAll());\r\n      console.log(\"Retrieved offline stories:\", result.length);\r\n      return result;\r\n    } catch (error) {\r\n      console.error(\"Failed to get offline stories:\", error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  async removeOfflineStory(id) {\r\n    try {\r\n      const transaction = this.db.transaction([\"offline-stories\"], \"readwrite\");\r\n      const store = transaction.objectStore(\"offline-stories\");\r\n\r\n      await this.executeTransaction(store.delete(id));\r\n      console.log(\"Offline story removed:\", id);\r\n      return true;\r\n    } catch (error) {\r\n      console.error(\"Failed to remove offline story:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Cached Stories Operations\r\n  async cacheStory(story) {\r\n    try {\r\n      const transaction = this.db.transaction([\"cached-stories\"], \"readwrite\");\r\n      const store = transaction.objectStore(\"cached-stories\");\r\n\r\n      const cachedStory = {\r\n        ...story,\r\n        cachedAt: new Date().toISOString(),\r\n      };\r\n\r\n      await this.executeTransaction(store.put(cachedStory));\r\n      console.log(\"Story cached:\", story.id);\r\n      return true;\r\n    } catch (error) {\r\n      console.error(\"Failed to cache story:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getCachedStories() {\r\n    try {\r\n      const transaction = this.db.transaction([\"cached-stories\"], \"readonly\");\r\n      const store = transaction.objectStore(\"cached-stories\");\r\n\r\n      const result = await this.executeTransaction(store.getAll());\r\n      console.log(\"Retrieved cached stories:\", result.length);\r\n      return result;\r\n    } catch (error) {\r\n      console.error(\"Failed to get cached stories:\", error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  async getCachedStory(storyId) {\r\n    try {\r\n      const transaction = this.db.transaction([\"cached-stories\"], \"readonly\");\r\n      const store = transaction.objectStore(\"cached-stories\");\r\n\r\n      const result = await this.executeTransaction(store.get(storyId));\r\n      return result;\r\n    } catch (error) {\r\n      console.error(\"Failed to get cached story:\", error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  // Clear old cached stories (older than 7 days)\r\n  async clearOldCachedStories() {\r\n    try {\r\n      const transaction = this.db.transaction([\"cached-stories\"], \"readwrite\");\r\n      const store = transaction.objectStore(\"cached-stories\");\r\n      const index = store.index(\"cachedAt\");\r\n\r\n      const sevenDaysAgo = new Date();\r\n      sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);\r\n\r\n      const range = IDBKeyRange.upperBound(sevenDaysAgo.toISOString());\r\n      const request = index.openCursor(range);\r\n\r\n      return new Promise((resolve, reject) => {\r\n        request.onsuccess = (event) => {\r\n          const cursor = event.target.result;\r\n          if (cursor) {\r\n            cursor.delete();\r\n            cursor.continue();\r\n          } else {\r\n            console.log(\"Old cached stories cleared\");\r\n            resolve();\r\n          }\r\n        };\r\n\r\n        request.onerror = () => reject(request.error);\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Failed to clear old cached stories:\", error);\r\n    }\r\n  }\r\n\r\n  // Utility method to execute transactions\r\n  executeTransaction(request) {\r\n    return new Promise((resolve, reject) => {\r\n      request.onsuccess = () => resolve(request.result);\r\n      request.onerror = () => reject(request.error);\r\n    });\r\n  }\r\n\r\n  // Close database connection\r\n  close() {\r\n    if (this.db) {\r\n      this.db.close();\r\n      this.db = null;\r\n      console.log(\"IndexedDB connection closed\");\r\n    }\r\n  }\r\n}\r\n\r\nexport default IndexedDBService;\r\n","import StoryPresenter from \"../presenters/story-presenter.js\";\nimport PushNotificationService from \"../services/push-notification-service.js\";\nimport IndexedDBService from \"../services/indexeddb-service.js\";\n\nclass AddStoryPage {\n  constructor(container) {\n    this._container = container;\n    this._presenter = new StoryPresenter(this);\n    this._pushNotificationService = new PushNotificationService();\n    this._indexedDBService = new IndexedDBService();\n    this._map = null;\n    this._marker = null;\n    this._position = null;\n    this._photoBlob = null;\n    this._stream = null;\n  }\n\n  async render() {\n    this._container.innerHTML = `\n      <section class=\"page form-container\" role=\"region\" aria-labelledby=\"add-story-title\">\n        <h2 id=\"add-story-title\">Add New Story</h2>\n        <div id=\"alert-container\" role=\"alert\" aria-live=\"assertive\"></div>\n        \n        <!-- Push Notification Section -->\n        <div id=\"notification-section\" class=\"form-group\">\n          <h3>Push Notifications</h3>\n          <div id=\"notification-status\"></div>\n          <button type=\"button\" id=\"enable-notifications\" style=\"display: none;\">Enable Notifications</button>\n          <button type=\"button\" id=\"disable-notifications\" style=\"display: none;\">Disable Notifications</button>\n        </div>\n        \n        <form id=\"add-story-form\">\n          <div class=\"form-group\">\n            <label for=\"description\">Description</label>\n            <textarea id=\"description\" name=\"description\" rows=\"4\" required></textarea>\n          </div>\n\n          <div class=\"form-group\">\n            <label for=\"map\">Location (Click on map to set)</label>\n            <div id=\"map\" aria-label=\"Map to select story location\" tabindex=\"0\"></div>\n            <p id=\"location-display\" aria-live=\"polite\">No location selected</p>\n          </div>\n\n          <div class=\"form-group camera-container\">\n            <label for=\"video\">Take Photo with Camera</label>\n            <video id=\"video\" autoplay aria-label=\"Camera preview\"></video>\n            <canvas id=\"canvas\"></canvas>\n            <div class=\"camera-buttons\">\n              <button type=\"button\" id=\"start-camera\">Start Camera</button>\n              <button type=\"button\" id=\"capture-photo\" disabled>Capture Photo</button>\n              <button type=\"button\" id=\"stop-camera\" disabled>Stop Camera</button>\n            </div>\n          </div>\n\n          <div class=\"preview-container\">\n            <label for=\"preview\">Photo Preview</label>\n            <img id=\"preview\" src=\"\" alt=\"Captured photo preview\" style=\"display: none;\">\n          </div>\n\n          <button type=\"submit\" id=\"submit-button\" disabled>Add Story</button>\n        </form>\n      </section>\n    `;\n\n    await this._initServices();\n    this._initMap();\n    this._initCameraButtons();\n    this._initForm();\n    this._initNotificationSection();\n  }\n\n  async _initServices() {\n    try {\n      await this._indexedDBService.init();\n      await this._pushNotificationService.init();\n    } catch (error) {\n      console.error(\"Failed to initialize services:\", error);\n    }\n  }\n\n  _initMap() {\n    this._map = L.map(\"map\").setView([0, 0], 2);\n\n    L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n      attribution:\n        '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n    }).addTo(this._map);\n\n    this._map.on(\"click\", (e) => {\n      this._position = {\n        lat: e.latlng.lat,\n        lon: e.latlng.lng,\n      };\n\n      document.getElementById(\n        \"location-display\"\n      ).textContent = `Location: ${this._position.lat.toFixed(\n        4\n      )}, ${this._position.lon.toFixed(4)}`;\n\n      if (this._marker) {\n        this._marker.setLatLng(e.latlng);\n      } else {\n        this._marker = L.marker(e.latlng).addTo(this._map);\n      }\n\n      this._updateSubmitButton();\n    });\n  }\n\n  _initCameraButtons() {\n    const startCameraButton = document.getElementById(\"start-camera\");\n    const capturPhotoButton = document.getElementById(\"capture-photo\");\n    const stopCameraButton = document.getElementById(\"stop-camera\");\n    const video = document.getElementById(\"video\");\n    const canvas = document.getElementById(\"canvas\");\n    const preview = document.getElementById(\"preview\");\n\n    startCameraButton.addEventListener(\"click\", async () => {\n      try {\n        this._stream = await navigator.mediaDevices.getUserMedia({\n          video: true,\n          audio: false,\n        });\n\n        video.srcObject = this._stream;\n        startCameraButton.disabled = true;\n        capturPhotoButton.disabled = false;\n        stopCameraButton.disabled = false;\n      } catch (error) {\n        console.error(\"Error accessing camera:\", error);\n        this.showError(`Failed to access camera: ${error.message}`);\n      }\n    });\n\n    capturPhotoButton.addEventListener(\"click\", () => {\n      canvas.width = video.videoWidth;\n      canvas.height = video.videoHeight;\n\n      const context = canvas.getContext(\"2d\");\n      context.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n      canvas.toBlob(\n        (blob) => {\n          this._photoBlob = blob;\n\n          const url = URL.createObjectURL(blob);\n          preview.src = url;\n          preview.style.display = \"block\";\n\n          this._updateSubmitButton();\n        },\n        \"image/jpeg\",\n        0.8\n      );\n    });\n\n    stopCameraButton.addEventListener(\"click\", () => {\n      if (this._stream) {\n        this._stream.getTracks().forEach((track) => track.stop());\n        this._stream = null;\n        video.srcObject = null;\n      }\n\n      startCameraButton.disabled = false;\n      capturPhotoButton.disabled = true;\n      stopCameraButton.disabled = true;\n    });\n  }\n\n  _initForm() {\n    const form = document.getElementById(\"add-story-form\");\n\n    form.addEventListener(\"submit\", async (e) => {\n      e.preventDefault();\n\n      const description = document.getElementById(\"description\").value;\n\n      try {\n        // Check if online\n        if (navigator.onLine) {\n          // Use presenter instead of directly calling the API\n          await this._presenter.addStory(\n            description,\n            this._photoBlob,\n            this._position?.lat,\n            this._position?.lon\n          );\n\n          // Try to send push notification after successful story creation\n          await this._sendStoryNotification(description);\n        } else {\n          // Save for offline sync\n          await this._saveOfflineStory(description);\n          this.showSuccess(\n            \"Story saved offline. It will be uploaded when you're back online.\"\n          );\n        }\n\n        if (this._stream) {\n          this._stream.getTracks().forEach((track) => track.stop());\n        }\n\n        setTimeout(() => {\n          window.location.hash = \"#/home\";\n        }, 2000);\n      } catch (error) {\n        // Error handling is managed by the presenter\n        console.error(error);\n      }\n    });\n  }\n\n  async _saveOfflineStory(description) {\n    try {\n      await this._indexedDBService.addOfflineStory(\n        description,\n        this._photoBlob,\n        this._position?.lat,\n        this._position?.lon\n      );\n\n      // Register for background sync if supported\n      if (\n        \"serviceWorker\" in navigator &&\n        \"sync\" in window.ServiceWorkerRegistration.prototype\n      ) {\n        const registration = await navigator.serviceWorker.ready;\n        await registration.sync.register(\"background-sync-story\");\n      }\n    } catch (error) {\n      console.error(\"Failed to save offline story:\", error);\n      throw new Error(\"Failed to save story offline\");\n    }\n  }\n\n  async _sendStoryNotification(description) {\n    try {\n      // Check if push notifications are supported and subscribed\n      const status =\n        await this._pushNotificationService.getSubscriptionStatus();\n\n      if (status.isSubscribed) {\n        // The server will send the push notification\n        console.log(\"Story created, push notification will be sent by server\");\n      }\n    } catch (error) {\n      console.error(\"Failed to handle push notification:\", error);\n      // Don't throw error as story creation was successful\n    }\n  }\n\n  async _initNotificationSection() {\n    const statusElement = document.getElementById(\"notification-status\");\n    const enableButton = document.getElementById(\"enable-notifications\");\n    const disableButton = document.getElementById(\"disable-notifications\");\n\n    try {\n      // Check if notifications are supported\n      if (!(\"Notification\" in window) || !(\"PushManager\" in window)) {\n        statusElement.innerHTML =\n          '<p class=\"alert alert-warning\">⚠️ Push notifications are not supported in this browser</p>';\n        enableButton.style.display = \"none\";\n        disableButton.style.display = \"none\";\n        return;\n      }\n\n      const permissionStatus = this._pushNotificationService.getPermissionStatus();\n      const status = await this._pushNotificationService.getSubscriptionStatus();\n\n      if (permissionStatus === \"denied\") {\n        statusElement.innerHTML =\n          '<p class=\"alert alert-error\">🚫 Notifications are blocked. Please enable them in your browser settings.</p>';\n        enableButton.style.display = \"none\";\n        disableButton.style.display = \"none\";\n      } else if (status.isSubscribed) {\n        statusElement.innerHTML =\n          '<p class=\"alert alert-success\">✅ Push notifications are enabled</p>';\n        disableButton.style.display = \"inline-block\";\n        enableButton.style.display = \"none\";\n      } else {\n        statusElement.innerHTML =\n          '<p class=\"alert alert-info\">🔔 Enable push notifications to get notified when your stories are published</p>';\n        enableButton.style.display = \"inline-block\";\n        disableButton.style.display = \"none\";\n      }\n    } catch (error) {\n      console.error(\"Error checking notification status:\", error);\n      statusElement.innerHTML =\n        '<p class=\"alert alert-warning\">⚠️ Unable to check notification status</p>';\n      enableButton.style.display = \"none\";\n      disableButton.style.display = \"none\";\n    }\n\n    enableButton.addEventListener(\"click\", async () => {\n      try {\n        // Show loading state\n        enableButton.disabled = true;\n        enableButton.textContent = \"Enabling...\";\n        \n        // Check permission first\n        const permissionStatus = this._pushNotificationService.getPermissionStatus();\n        \n        if (permissionStatus === \"denied\") {\n          throw new Error(\"Notifications are blocked. Please enable them in your browser settings and try again.\");\n        }\n        \n        await this._pushNotificationService.subscribe();\n        await this._initNotificationSection(); // Refresh the section\n        this.showSuccess(\"Push notifications enabled successfully!\");\n      } catch (error) {\n        console.error(\"Failed to enable notifications:\", error);\n        \n        // Provide specific error messages\n        let errorMessage = \"Failed to enable push notifications\";\n        if (error.message.includes(\"permission\")) {\n          errorMessage = \"Permission denied. Please allow notifications in your browser and try again.\";\n        } else if (error.message.includes(\"login\")) {\n          errorMessage = \"Please log in first to enable notifications.\";\n        } else if (error.message.includes(\"settings\")) {\n          errorMessage = error.message;\n        }\n        \n        this.showError(errorMessage);\n      } finally {\n        // Reset button state\n        enableButton.disabled = false;\n        enableButton.textContent = \"Enable Notifications\";\n      }\n    });\n\n    disableButton.addEventListener(\"click\", async () => {\n      try {\n        await this._pushNotificationService.unsubscribe();\n        await this._initNotificationSection(); // Refresh the section\n        this.showSuccess(\"Push notifications disabled successfully!\");\n      } catch (error) {\n        console.error(\"Failed to disable notifications:\", error);\n        this.showError(\"Failed to disable push notifications\");\n      }\n    });\n  }\n\n  _updateSubmitButton() {\n    const submitButton = document.getElementById(\"submit-button\");\n    submitButton.disabled = !this._photoBlob;\n  }\n\n  // Methods called by the presenter\n  showLoading() {\n    const submitButton = document.getElementById(\"submit-button\");\n    submitButton.textContent = \"Adding Story...\";\n    submitButton.disabled = true;\n  }\n\n  hideLoading() {\n    const submitButton = document.getElementById(\"submit-button\");\n    submitButton.textContent = \"Add Story\";\n    submitButton.disabled = !this._photoBlob;\n  }\n\n  showError(message) {\n    const alertContainer = document.getElementById(\"alert-container\");\n    alertContainer.innerHTML = `\n      <div class=\"alert alert-danger\">\n        ${message}\n      </div>\n    `;\n  }\n\n  showSuccess(message) {\n    const alertContainer = document.getElementById(\"alert-container\");\n    alertContainer.innerHTML = `\n      <div class=\"alert alert-success\">\n        ${message}\n      </div>\n    `;\n  }\n}\n\nexport default AddStoryPage;\n","import AuthService from \"./auth-service.js\";\r\n\r\nclass PushNotificationService {\r\n  constructor() {\r\n    this.authService = new AuthService();\r\n    this.vapidPublicKey =\r\n      \"BCCs2eonMI-6H2ctvFaWg-UYdDv387Vno_bzUzALpB442r2lCnsHmtrx8biyPi_E-1fSGABK_Qs_GlvPoJJqxbk\";\r\n    this.apiBaseUrl = \"https://story-api.dicoding.dev/v1\";\r\n    this.registration = null;\r\n  }\r\n\r\n  async init() {\r\n    try {\r\n      // Check if service worker is supported\r\n      if (!(\"serviceWorker\" in navigator)) {\r\n        throw new Error(\"Service Worker not supported\");\r\n      }\r\n\r\n      // Check if push messaging is supported\r\n      if (!(\"PushManager\" in window)) {\r\n        throw new Error(\"Push messaging not supported\");\r\n      }\r\n\r\n      // Get service worker registration\r\n      this.registration = await navigator.serviceWorker.ready;\r\n      console.log(\"Push notification service initialized\");\r\n\r\n      return true;\r\n    } catch (error) {\r\n      console.error(\"Failed to initialize push notification service:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n  async requestPermission() {\r\n    try {\r\n      // Check if Notification API is supported\r\n      if (!(\"Notification\" in window)) {\r\n        throw new Error(\"This browser does not support notifications\");\r\n      }\r\n\r\n      // Check current permission status\r\n      let permission = Notification.permission;\r\n\r\n      if (permission === \"default\") {\r\n        // Request permission\r\n        permission = await Notification.requestPermission();\r\n      }\r\n\r\n      if (permission === \"granted\") {\r\n        console.log(\"Notification permission granted\");\r\n        return true;\r\n      } else if (permission === \"denied\") {\r\n        console.log(\"Notification permission denied\");\r\n        throw new Error(\"Notification permission was denied. Please enable notifications in your browser settings.\");\r\n      } else {\r\n        console.log(\"Notification permission dismissed\");\r\n        throw new Error(\"Notification permission was not granted\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error requesting notification permission:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n  async subscribe() {\r\n    try {\r\n      // Check if user is logged in\r\n      if (!this.authService.isLoggedIn()) {\r\n        throw new Error(\"User must be logged in to subscribe to notifications\");\r\n      }\r\n\r\n      // Initialize if not already done\r\n      if (!this.registration) {\r\n        await this.init();\r\n      }\r\n\r\n      // Request permission explicitly first\r\n      await this.requestPermission();\r\n\r\n      // Check if already subscribed\r\n      const existingSubscription =\r\n        await this.registration.pushManager.getSubscription();\r\n      if (existingSubscription) {\r\n        console.log(\"Already subscribed to push notifications\");\r\n        return existingSubscription;\r\n      }\r\n\r\n      // Create new subscription\r\n      const subscription = await this.registration.pushManager.subscribe({\r\n        userVisibleOnly: true,\r\n        applicationServerKey: this.urlBase64ToUint8Array(this.vapidPublicKey),\r\n      });\r\n\r\n      // Send subscription to server\r\n      await this.sendSubscriptionToServer(subscription);\r\n\r\n      console.log(\"Successfully subscribed to push notifications\");\r\n      return subscription;\r\n    } catch (error) {\r\n      console.error(\"Failed to subscribe to push notifications:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async unsubscribe() {\r\n    try {\r\n      if (!this.registration) {\r\n        await this.init();\r\n      }\r\n\r\n      const subscription =\r\n        await this.registration.pushManager.getSubscription();\r\n\r\n      if (!subscription) {\r\n        console.log(\"Not subscribed to push notifications\");\r\n        return true;\r\n      }\r\n\r\n      // Unsubscribe from browser\r\n      await subscription.unsubscribe();\r\n\r\n      // Remove subscription from server\r\n      await this.removeSubscriptionFromServer(subscription);\r\n\r\n      console.log(\"Successfully unsubscribed from push notifications\");\r\n      return true;\r\n    } catch (error) {\r\n      console.error(\"Failed to unsubscribe from push notifications:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getSubscriptionStatus() {\r\n    try {\r\n      if (!this.registration) {\r\n        await this.init();\r\n      }\r\n\r\n      const subscription =\r\n        await this.registration.pushManager.getSubscription();\r\n      return {\r\n        isSubscribed: !!subscription,\r\n        subscription: subscription,\r\n      };\r\n    } catch (error) {\r\n      console.error(\"Failed to get subscription status:\", error);\r\n      return {\r\n        isSubscribed: false,\r\n        subscription: null,\r\n      };\r\n    }\r\n  }\r\n\r\n  async sendSubscriptionToServer(subscription) {\r\n    try {\r\n      const token = this.authService.getToken();\r\n\r\n      const subscriptionData = {\r\n        endpoint: subscription.endpoint,\r\n        keys: {\r\n          p256dh: this.arrayBufferToBase64(subscription.getKey(\"p256dh\")),\r\n          auth: this.arrayBufferToBase64(subscription.getKey(\"auth\")),\r\n        },\r\n      };\r\n\r\n      const response = await fetch(\r\n        `${this.apiBaseUrl}/notifications/subscribe`,\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n          body: JSON.stringify(subscriptionData),\r\n        }\r\n      );\r\n\r\n      const responseData = await response.json();\r\n\r\n      if (!response.ok || responseData.error) {\r\n        throw new Error(\r\n          responseData.message || \"Failed to subscribe on server\"\r\n        );\r\n      }\r\n\r\n      console.log(\"Subscription sent to server successfully\");\r\n      return responseData;\r\n    } catch (error) {\r\n      console.error(\"Failed to send subscription to server:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async removeSubscriptionFromServer(subscription) {\r\n    try {\r\n      const token = this.authService.getToken();\r\n\r\n      const subscriptionData = {\r\n        endpoint: subscription.endpoint,\r\n      };\r\n\r\n      const response = await fetch(\r\n        `${this.apiBaseUrl}/notifications/subscribe`,\r\n        {\r\n          method: \"DELETE\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n          body: JSON.stringify(subscriptionData),\r\n        }\r\n      );\r\n\r\n      const responseData = await response.json();\r\n\r\n      if (!response.ok || responseData.error) {\r\n        throw new Error(\r\n          responseData.message || \"Failed to unsubscribe on server\"\r\n        );\r\n      }\r\n\r\n      console.log(\"Subscription removed from server successfully\");\r\n      return responseData;\r\n    } catch (error) {\r\n      console.error(\"Failed to remove subscription from server:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Helper method to convert VAPID key\r\n  urlBase64ToUint8Array(base64String) {\r\n    const padding = \"=\".repeat((4 - (base64String.length % 4)) % 4);\r\n    const base64 = (base64String + padding)\r\n      .replace(/-/g, \"+\")\r\n      .replace(/_/g, \"/\");\r\n\r\n    const rawData = window.atob(base64);\r\n    const outputArray = new Uint8Array(rawData.length);\r\n\r\n    for (let i = 0; i < rawData.length; ++i) {\r\n      outputArray[i] = rawData.charCodeAt(i);\r\n    }\r\n    return outputArray;\r\n  }\r\n\r\n  // Helper method to convert ArrayBuffer to base64\r\n  arrayBufferToBase64(buffer) {\r\n    const bytes = new Uint8Array(buffer);\r\n    let binary = \"\";\r\n    for (let i = 0; i < bytes.byteLength; i++) {\r\n      binary += String.fromCharCode(bytes[i]);\r\n    }\r\n    return window.btoa(binary);\r\n  }\r\n\r\n  // Test notification (for development)\r\n  async sendTestNotification() {\r\n    try {\r\n      if (Notification.permission === \"granted\") {\r\n        new Notification(\"Test Notification\", {\r\n          body: \"This is a test notification from Dicoding Story App\",\r\n          icon: \"/icons/icon-192x192.png\",\r\n          badge: \"/icons/icon-72x72.png\",\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Failed to send test notification:\", error);\r\n    }\r\n  }\r\n\r\n  getPermissionStatus() {\r\n    if (!(\"Notification\" in window)) {\r\n      return \"unsupported\";\r\n    }\r\n    return Notification.permission;\r\n  }\r\n\r\n  isPermissionGranted() {\r\n    return this.getPermissionStatus() === \"granted\";\r\n  }\r\n}\r\n\r\nexport default PushNotificationService;\r\n","import AuthPresenter from \"../presenters/auth-presenter.js\";\n\nclass LoginPage {\n  constructor(container) {\n    this._container = container;\n    this._presenter = new AuthPresenter(this);\n  }\n\n  async render() {\n    this._container.innerHTML = `\n      <section class=\"page form-container\" role=\"region\" aria-labelledby=\"login-title\">\n        <h2 id=\"login-title\">Login</h2>\n        <div id=\"alert-container\" role=\"alert\" aria-live=\"assertive\"></div>\n        <form id=\"login-form\">\n          <div class=\"form-group\">\n            <label for=\"email\">Email</label>\n            <input type=\"email\" id=\"email\" name=\"email\" required>\n          </div>\n          <div class=\"form-group\">\n            <label for=\"password\">Password</label>\n            <input type=\"password\" id=\"password\" name=\"password\" required>\n          </div>\n          <button type=\"submit\" id=\"submit-button\">Login</button>\n        </form>\n        <p>Don't have an account? <a href=\"#/register\">Register here</a></p>\n      </section>\n    `;\n\n    this._initLoginForm();\n  }\n\n  _initLoginForm() {\n    const form = document.getElementById(\"login-form\");\n\n    form.addEventListener(\"submit\", async (e) => {\n      e.preventDefault();\n\n      const email = document.getElementById(\"email\").value;\n      const password = document.getElementById(\"password\").value;\n\n      try {\n        await this._presenter.login(email, password);\n\n        setTimeout(() => {\n          window.location.hash = \"#/home\";\n        }, 1000);\n      } catch (error) {\n        console.error(error);\n      }\n    });\n  }\n\n  showLoading() {\n    const button = document.getElementById(\"submit-button\");\n    button.textContent = \"Logging in...\";\n    button.disabled = true;\n  }\n\n  hideLoading() {\n    const button = document.getElementById(\"submit-button\");\n    button.textContent = \"Login\";\n    button.disabled = false;\n  }\n\n  showError(message) {\n    const alertContainer = document.getElementById(\"alert-container\");\n    alertContainer.innerHTML = `\n      <div class=\"alert alert-danger\">\n        ${message}\n      </div>\n    `;\n  }\n\n  showSuccess(message) {\n    const alertContainer = document.getElementById(\"alert-container\");\n    alertContainer.innerHTML = `\n      <div class=\"alert alert-success\">\n        ${message}\n      </div>\n    `;\n  }\n}\n\nexport default LoginPage;\n","import BasePresenter from \"./base-presenter.js\";\nimport AuthModel from \"../models/auth-model.js\"; // Impor AuthModel\n\nclass AuthPresenter extends BasePresenter {\n  constructor(view) {\n    super(view);\n    this._authModel = new AuthModel(); // Gunakan AuthModel\n  }\n\n  async login(email, password) {\n    try {\n      this._view.showLoading();\n      // Panggil metode login dari AuthModel\n      const result = await this._authModel.login(email, password);\n      this._view.showSuccess(\"Login successful. Redirecting to home page...\");\n      return result;\n    } catch (error) {\n      this._view.showError(error.message);\n      throw error;\n    } finally {\n      this._view.hideLoading();\n    }\n  }\n\n  async register(name, email, password) {\n    try {\n      this._view.showLoading();\n      // Panggil metode register dari AuthModel\n      const result = await this._authModel.register(name, email, password);\n      this._view.showSuccess(\n        \"Registration successful. Please login with your new account.\"\n      );\n      return result;\n    } catch (error) {\n      this._view.showError(error.message);\n      throw error;\n    } finally {\n      this._view.hideLoading();\n    }\n  }\n\n  isLoggedIn() {\n    return this._authModel.isLoggedIn(); // Gunakan AuthModel\n  }\n\n  logout() {\n    this._authModel.logout(); // Gunakan AuthModel\n  }\n}\n\nexport default AuthPresenter;\n","import ApiService from \"../services/api-service.js\";\r\nimport AuthService from \"../services/auth-service.js\";\r\n\r\nclass AuthModel {\r\n  constructor() {\r\n    this._apiService = new ApiService();\r\n    this._authService = new AuthService();\r\n  }\r\n\r\n  async login(email, password) {\r\n    const result = await this._apiService.login(email, password);\r\n    return result;\r\n  }\r\n\r\n  async register(name, email, password) {\r\n    const result = await this._apiService.register(name, email, password);\r\n    return result;\r\n  }\r\n\r\n  isLoggedIn() {\r\n    return this._authService.isLoggedIn();\r\n  }\r\n\r\n  logout() {\r\n    this._authService.logout();\r\n  }\r\n}\r\n\r\nexport default AuthModel;\r\n","import AuthPresenter from \"../presenters/auth-presenter.js\";\n\nclass RegisterPage {\n  constructor(container) {\n    this._container = container;\n    this._presenter = new AuthPresenter(this);\n  }\n\n  async render() {\n    this._container.innerHTML = `\n      <section class=\"page form-container\" role=\"region\" aria-labelledby=\"register-title\">\n        <h2 id=\"register-title\">Register</h2>\n        <div id=\"alert-container\" role=\"alert\" aria-live=\"assertive\"></div>\n        <form id=\"register-form\">\n          <div class=\"form-group\">\n            <label for=\"name\">Name</label>\n            <input type=\"text\" id=\"name\" name=\"name\" required>\n          </div>\n          <div class=\"form-group\">\n            <label for=\"email\">Email</label>\n            <input type=\"email\" id=\"email\" name=\"email\" required>\n          </div>\n          <div class=\"form-group\">\n            <label for=\"password\">Password (min 8 characters)</label>\n            <input type=\"password\" id=\"password\" name=\"password\" minlength=\"8\" required>\n          </div>\n          <button type=\"submit\" id=\"submit-button\">Register</button>\n        </form>\n        <p>Already have an account? <a href=\"#/login\">Login here</a></p>\n      </section>\n    `;\n\n    this._initRegisterForm();\n  }\n\n  _initRegisterForm() {\n    const form = document.getElementById(\"register-form\");\n\n    form.addEventListener(\"submit\", async (e) => {\n      e.preventDefault();\n\n      const name = document.getElementById(\"name\").value;\n      const email = document.getElementById(\"email\").value;\n      const password = document.getElementById(\"password\").value;\n\n      try {\n        await this._presenter.register(name, email, password);\n\n        setTimeout(() => {\n          window.location.hash = \"#/login\";\n        }, 2000);\n      } catch (error) {\n        console.error(error);\n      }\n    });\n  }\n\n  showLoading() {\n    const button = document.getElementById(\"submit-button\");\n    button.textContent = \"Registering...\";\n    button.disabled = true;\n  }\n\n  hideLoading() {\n    const button = document.getElementById(\"submit-button\");\n    button.textContent = \"Register\";\n    button.disabled = false;\n  }\n\n  showError(message) {\n    const alertContainer = document.getElementById(\"alert-container\");\n    alertContainer.innerHTML = `\n      <div class=\"alert alert-danger\">\n        ${message}\n      </div>\n    `;\n  }\n\n  showSuccess(message) {\n    const alertContainer = document.getElementById(\"alert-container\");\n    alertContainer.innerHTML = `\n      <div class=\"alert alert-success\">\n        ${message}\n      </div>\n    `;\n  }\n}\n\nexport default RegisterPage;\n","import StoryPresenter from \"../presenters/story-presenter.js\";\nimport IndexedDBService from \"../services/indexeddb-service.js\";\n\nclass DetailPage {\n  constructor(container, id) {\n    this._container = container;\n    this._id = id;\n    this._presenter = new StoryPresenter(this);\n    this._indexedDBService = new IndexedDBService();\n    this._story = null;\n    this._map = null;\n  }\n\n  async render() {\n    this._container.innerHTML = `\n      <section class=\"page\" role=\"region\" aria-labelledby=\"detail-title\">\n        <h2 id=\"detail-title\">Story Detail</h2>\n        <div id=\"loading\" role=\"status\" aria-live=\"polite\">Loading story...</div>\n        <div id=\"error-container\" role=\"alert\" aria-live=\"assertive\" style=\"display: none;\"></div>\n        <div id=\"story-detail\" style=\"display: none;\"></div>\n      </section>\n    `;\n\n    await this._initIndexedDB();\n    await this._fetchStory();\n    this._renderStory();\n  }\n\n  async _initIndexedDB() {\n    try {\n      await this._indexedDBService.init();\n    } catch (error) {\n      console.error(\"Failed to initialize IndexedDB:\", error);\n    }\n  }\n\n  async _fetchStory() {\n    try {\n      this._story = await this._presenter.getStoryDetail(this._id);\n    } catch (error) {\n      console.error(\"Error fetching story:\", error);\n      // Try to get from IndexedDB cache\n      try {\n        this._story = await this._indexedDBService.getCachedStory(this._id);\n        if (this._story) {\n          console.log(\"Story loaded from cache\");\n        }\n      } catch (cacheError) {\n        console.error(\"Error loading from cache:\", cacheError);\n      }\n    }\n  }\n\n  async _renderStory() {\n    if (!this._story) return;\n\n    document.getElementById(\"loading\").style.display = \"none\";\n\n    const storyDetail = document.getElementById(\"story-detail\");\n    storyDetail.style.display = \"block\";\n\n    const isFavorite = await this._checkIfFavorite(this._story.id);\n\n    storyDetail.innerHTML = `\n      <div class=\"story-detail\">\n        <img src=\"${this._story.photoUrl}\" alt=\"Photo by ${\n      this._story.name\n    }\" class=\"story-img\">\n        <h3>${this._story.name}</h3>\n        <p class=\"story-date\">${this._formatDate(this._story.createdAt)}</p>\n        <p class=\"story-description\">${this._story.description}</p>\n        <div class=\"story-actions\">\n          <button \n            id=\"favorite-btn\" \n            class=\"favorite-btn ${isFavorite ? \"is-favorite\" : \"\"}\"\n            aria-label=\"${\n              isFavorite ? \"Remove from favorites\" : \"Add to favorites\"\n            }\"\n          >\n            ${isFavorite ? \"❤️ Remove from Favorites\" : \"🤍 Add to Favorites\"}\n          </button>\n        </div>\n        ${\n          this._story.lat && this._story.lon\n            ? '<div id=\"map\" aria-label=\"Map showing story location\"></div>'\n            : \"\"\n        }\n        <a href=\"#/home\">Back to Home</a>\n      </div>\n    `;\n\n    this._initFavoriteButton();\n\n    if (this._story.lat && this._story.lon) {\n      this._initMap();\n    }\n  }\n\n  async _checkIfFavorite(storyId) {\n    try {\n      return await this._indexedDBService.isFavoriteStory(storyId);\n    } catch (error) {\n      console.error(\"Failed to check favorite status:\", error);\n      return false;\n    }\n  }\n\n  _initFavoriteButton() {\n    const favoriteButton = document.getElementById(\"favorite-btn\");\n\n    favoriteButton.addEventListener(\"click\", async (e) => {\n      e.preventDefault();\n      const isFavorite = favoriteButton.classList.contains(\"is-favorite\");\n\n      try {\n        if (isFavorite) {\n          await this._removeFavorite(favoriteButton);\n        } else {\n          await this._addFavorite(favoriteButton);\n        }\n      } catch (error) {\n        console.error(\"Failed to update favorite:\", error);\n        this.showError(\"Failed to update favorite status\");\n      }\n    });\n  }\n\n  async _addFavorite(button) {\n    await this._indexedDBService.addFavoriteStory(this._story);\n\n    button.classList.add(\"is-favorite\");\n    button.textContent = \"❤️ Remove from Favorites\";\n    button.setAttribute(\"aria-label\", \"Remove from favorites\");\n\n    this.showSuccess(\"Story added to favorites!\");\n  }\n\n  async _removeFavorite(button) {\n    await this._indexedDBService.removeFavoriteStory(this._story.id);\n\n    button.classList.remove(\"is-favorite\");\n    button.textContent = \"🤍 Add to Favorites\";\n    button.setAttribute(\"aria-label\", \"Add to favorites\");\n\n    this.showSuccess(\"Story removed from favorites!\");\n  }\n\n  _initMap() {\n    this._map = L.map(\"map\").setView([this._story.lat, this._story.lon], 13);\n\n    L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n      attribution:\n        '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n    }).addTo(this._map);\n\n    const marker = L.marker([this._story.lat, this._story.lon]).addTo(\n      this._map\n    );\n    marker\n      .bindPopup(\n        `\n      <div class=\"map-popup\">\n        <img src=\"${this._story.photoUrl}\" alt=\"Photo by ${this._story.name}\">\n        <h3>${this._story.name}</h3>\n        <p>${this._truncateText(this._story.description, 50)}</p>\n      </div>\n    `\n      )\n      .openPopup();\n  }\n\n  _truncateText(text, maxLength) {\n    if (text.length <= maxLength) return text;\n    return text.substring(0, maxLength) + \"...\";\n  }\n\n  _formatDate(dateString) {\n    const options = {\n      year: \"numeric\",\n      month: \"short\",\n      day: \"numeric\",\n      hour: \"numeric\",\n      minute: \"numeric\",\n    };\n    return new Date(dateString).toLocaleDateString(\"id-ID\", options);\n  }\n\n  showLoading() {\n    const loadingElement = document.getElementById(\"loading\");\n    loadingElement.style.display = \"block\";\n  }\n\n  hideLoading() {\n    const loadingElement = document.getElementById(\"loading\");\n    loadingElement.style.display = \"none\";\n  }\n\n  showError(message) {\n    document.getElementById(\"loading\").style.display = \"none\";\n\n    const errorContainer = document.getElementById(\"error-container\");\n    errorContainer.style.display = \"block\";\n    errorContainer.innerHTML = `\n      <div class=\"alert alert-danger\">\n        ${message}\n      </div>\n      <a href=\"#/home\">Back to Home</a>\n    `;\n  }\n\n  showSuccess(message) {\n    const errorContainer = document.getElementById(\"error-container\");\n    errorContainer.style.display = \"block\";\n    errorContainer.innerHTML = `\n      <div class=\"alert alert-success\">\n        ${message}\n      </div>\n    `;\n\n    // Auto-hide success message after 3 seconds\n    setTimeout(() => {\n      errorContainer.style.display = \"none\";\n    }, 3000);\n  }\n}\n\nexport default DetailPage;\n","import IndexedDBService from \"../services/indexeddb-service.js\";\r\n\r\nclass FavoritesPage {\r\n  constructor(container) {\r\n    this._container = container;\r\n    this._indexedDBService = new IndexedDBService();\r\n    this._favoriteStories = [];\r\n  }\r\n\r\n  async render() {\r\n    this._container.innerHTML = `\r\n      <section class=\"page\" role=\"region\" aria-labelledby=\"favorites-title\">\r\n        <h2 id=\"favorites-title\">Favorite Stories</h2>\r\n        <div id=\"loading\" role=\"status\" aria-live=\"polite\">Loading favorite stories...</div>\r\n        <div id=\"error-container\" role=\"alert\" aria-live=\"assertive\" style=\"display:none;\"></div>\r\n        <div id=\"empty-state\" style=\"display:none;\">\r\n          <p>You haven't saved any favorite stories yet.</p>\r\n          <p><a href=\"#/home\">Browse stories</a> and click the heart icon to add them to your favorites.</p>\r\n        </div>\r\n        <div id=\"favorites-list\" class=\"story-list\"></div>\r\n        <div id=\"bulk-actions\" style=\"display:none;\">\r\n          <button id=\"clear-all-favorites\" type=\"button\">Clear All Favorites</button>\r\n        </div>\r\n      </section>\r\n    `;\r\n\r\n    await this._initIndexedDB();\r\n    await this._loadFavoriteStories();\r\n    this._renderFavoriteStories();\r\n    this._initBulkActions();\r\n  }\r\n\r\n  async _initIndexedDB() {\r\n    try {\r\n      await this._indexedDBService.init();\r\n    } catch (error) {\r\n      console.error(\"Failed to initialize IndexedDB:\", error);\r\n      this.showError(\r\n        \"Failed to load favorites. Please try refreshing the page.\"\r\n      );\r\n    }\r\n  }\r\n\r\n  async _loadFavoriteStories() {\r\n    try {\r\n      this._favoriteStories = await this._indexedDBService.getFavoriteStories();\r\n      console.log(\"Loaded favorite stories:\", this._favoriteStories.length);\r\n    } catch (error) {\r\n      console.error(\"Failed to load favorite stories:\", error);\r\n      this.showError(\"Failed to load favorite stories.\");\r\n    }\r\n  }\r\n\r\n  _renderFavoriteStories() {\r\n    const loadingElement = document.getElementById(\"loading\");\r\n    const favoritesListElement = document.getElementById(\"favorites-list\");\r\n    const emptyStateElement = document.getElementById(\"empty-state\");\r\n    const bulkActionsElement = document.getElementById(\"bulk-actions\");\r\n\r\n    loadingElement.style.display = \"none\";\r\n\r\n    if (this._favoriteStories.length === 0) {\r\n      emptyStateElement.style.display = \"block\";\r\n      favoritesListElement.style.display = \"none\";\r\n      bulkActionsElement.style.display = \"none\";\r\n      return;\r\n    }\r\n\r\n    emptyStateElement.style.display = \"none\";\r\n    favoritesListElement.style.display = \"grid\";\r\n    bulkActionsElement.style.display = \"block\";\r\n\r\n    favoritesListElement.innerHTML = this._favoriteStories\r\n      .sort((a, b) => new Date(b.favoriteAt) - new Date(a.favoriteAt))\r\n      .map(\r\n        (story) => `\r\n      <article class=\"story-item\">\r\n        <img src=\"${story.photoUrl}\" alt=\"Photo by ${\r\n          story.name\r\n        }\" class=\"story-img\">\r\n        <div class=\"story-content\">\r\n          <h3>${story.name}</h3>\r\n          <p class=\"story-description\">${this._truncateText(\r\n            story.description,\r\n            100\r\n          )}</p>\r\n          <p class=\"story-date\">Added to favorites: ${this._formatDate(\r\n            story.favoriteAt\r\n          )}</p>\r\n          <div class=\"story-actions\">\r\n            <a href=\"#/detail/${story.id}\" class=\"story-link\">Read more</a>\r\n            <button \r\n              class=\"remove-favorite-btn\" \r\n              data-story-id=\"${story.id}\"\r\n              aria-label=\"Remove ${story.name} from favorites\"\r\n            >\r\n              Remove from Favorites\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </article>\r\n    `\r\n      )\r\n      .join(\"\");\r\n\r\n    this._initRemoveFavoriteButtons();\r\n  }\r\n\r\n  _initRemoveFavoriteButtons() {\r\n    const removeButtons = document.querySelectorAll(\".remove-favorite-btn\");\r\n\r\n    removeButtons.forEach((button) => {\r\n      button.addEventListener(\"click\", async (e) => {\r\n        e.preventDefault();\r\n        const storyId = button.dataset.storyId;\r\n        await this._removeFavoriteStory(storyId);\r\n      });\r\n    });\r\n  }\r\n\r\n  _initBulkActions() {\r\n    const clearAllButton = document.getElementById(\"clear-all-favorites\");\r\n\r\n    clearAllButton.addEventListener(\"click\", async () => {\r\n      const confirmed = confirm(\r\n        \"Are you sure you want to remove all favorite stories?\"\r\n      );\r\n      if (confirmed) {\r\n        await this._clearAllFavorites();\r\n      }\r\n    });\r\n  }\r\n\r\n  async _removeFavoriteStory(storyId) {\r\n    try {\r\n      await this._indexedDBService.removeFavoriteStory(storyId);\r\n\r\n      // Remove from local array\r\n      this._favoriteStories = this._favoriteStories.filter(\r\n        (story) => story.id !== storyId\r\n      );\r\n\r\n      // Re-render the list\r\n      this._renderFavoriteStories();\r\n\r\n      this.showSuccess(\"Story removed from favorites\");\r\n    } catch (error) {\r\n      console.error(\"Failed to remove favorite story:\", error);\r\n      this.showError(\"Failed to remove story from favorites\");\r\n    }\r\n  }\r\n\r\n  async _clearAllFavorites() {\r\n    try {\r\n      // Remove all favorites one by one\r\n      for (const story of this._favoriteStories) {\r\n        await this._indexedDBService.removeFavoriteStory(story.id);\r\n      }\r\n\r\n      this._favoriteStories = [];\r\n      this._renderFavoriteStories();\r\n\r\n      this.showSuccess(\"All favorite stories removed\");\r\n    } catch (error) {\r\n      console.error(\"Failed to clear all favorites:\", error);\r\n      this.showError(\"Failed to clear favorite stories\");\r\n    }\r\n  }\r\n\r\n  _truncateText(text, maxLength) {\r\n    if (text.length <= maxLength) return text;\r\n    return text.substring(0, maxLength) + \"...\";\r\n  }\r\n\r\n  _formatDate(dateString) {\r\n    const options = {\r\n      year: \"numeric\",\r\n      month: \"short\",\r\n      day: \"numeric\",\r\n      hour: \"2-digit\",\r\n      minute: \"2-digit\",\r\n    };\r\n    return new Date(dateString).toLocaleDateString(\"id-ID\", options);\r\n  }\r\n\r\n  showLoading() {\r\n    const loadingElement = document.getElementById(\"loading\");\r\n    if (loadingElement) {\r\n      loadingElement.style.display = \"block\";\r\n    }\r\n  }\r\n\r\n  hideLoading() {\r\n    const loadingElement = document.getElementById(\"loading\");\r\n    if (loadingElement) {\r\n      loadingElement.style.display = \"none\";\r\n    }\r\n  }\r\n\r\n  showError(message) {\r\n    const errorContainer = document.getElementById(\"error-container\");\r\n    if (errorContainer) {\r\n      errorContainer.style.display = \"block\";\r\n      errorContainer.innerHTML = `\r\n        <div class=\"alert alert-danger\">\r\n          ${message}\r\n        </div>\r\n      `;\r\n    }\r\n  }\r\n\r\n  showSuccess(message) {\r\n    const errorContainer = document.getElementById(\"error-container\");\r\n    if (errorContainer) {\r\n      errorContainer.style.display = \"block\";\r\n      errorContainer.innerHTML = `\r\n        <div class=\"alert alert-success\">\r\n          ${message}\r\n        </div>\r\n      `;\r\n\r\n      // Auto-hide success message after 3 seconds\r\n      setTimeout(() => {\r\n        errorContainer.style.display = \"none\";\r\n      }, 3000);\r\n    }\r\n  }\r\n}\r\n\r\nexport default FavoritesPage;\r\n","module.exports = __parcel__import__.meta.resolve(\"czWhb\");"],"names":["$60ac1acdbcb4c733$export$2e2bcd8739ae039","constructor","view","_view","init","handleError","error","defaultMessage","message","showError","console","$6b1c4fe551cd88bd$export$2e2bcd8739ae039","_storageKey","setAuth","data","localStorage","setItem","JSON","stringify","getAuth","getItem","parse","isLoggedIn","getToken","auth","token","getUserName","name","logout","removeItem","$dedf9fff028735c2$export$2e2bcd8739ae039","_baseUrl","_authService","_getAuthHeader","log","Authorization","register","email","password","response","fetch","method","headers","body","responseJson","json","Error","login","loginResult","userId","getStories","page","size","location","url","URL","searchParams","append","listStory","_getStoriesAsGuest","getStoryDetail","id","story","addStory","description","photoBlob","lat","lon","formData","FormData","endpoint","$f8fd31f58f15ba1c$export$2e2bcd8739ae039","_apiService","$887d86aa32cb20b0$export$2e2bcd8739ae039","_storyModel","showLoading","hideLoading","result","showSuccess","$838de00941db0e13$export$2e2bcd8739ae039","dbName","dbVersion","db","Promise","resolve","reject","request","indexedDB","open","onerror","onsuccess","onupgradeneeded","event","target","createObjectStores","objectStoreNames","contains","favoriteStore","createObjectStore","keyPath","createIndex","unique","offlineStore","autoIncrement","cachedStore","addFavoriteStory","store","transaction","objectStore","favoriteStory","favoriteAt","Date","toISOString","executeTransaction","add","removeFavoriteStory","storyId","delete","getFavoriteStories","getAll","length","isFavoriteStory","get","addOfflineStory","offlineStory","timestamp","synced","getOfflineStories","removeOfflineStory","cacheStory","cachedStory","cachedAt","put","getCachedStories","getCachedStory","clearOldCachedStories","index","sevenDaysAgo","setDate","getDate","range","IDBKeyRange","upperBound","openCursor","cursor","continue","close","$05a4d3ded1111bd8$export$2e2bcd8739ae039","container","_container","_presenter","_indexedDBService","_stories","_map","render","innerHTML","_initIndexedDB","_fetchStories","_initMap","_renderStories","storyListElement","document","getElementById","loadingElement","style","display","all","map","isFavorite","_checkIfFavorite","photoUrl","_truncateText","_formatDate","createdAt","then","storyHtmlArray","join","_initFavoriteButtons","favoriteButtons","querySelectorAll","forEach","button","addEventListener","e","preventDefault","dataset","classList","_removeFavorite","_addFavorite","find","s","textContent","setAttribute","remove","L","setView","tileLayer","attribution","addTo","marker","bindPopup","text","maxLength","substring","dateString","toLocaleDateString","year","month","day","errorContainer","setTimeout","$044e26d168a7491a$export$2e2bcd8739ae039","authService","vapidPublicKey","apiBaseUrl","registration","navigator","window","serviceWorker","ready","requestPermission","permission","Notification","subscribe","existingSubscription","pushManager","getSubscription","subscription","userVisibleOnly","applicationServerKey","urlBase64ToUint8Array","sendSubscriptionToServer","unsubscribe","removeSubscriptionFromServer","getSubscriptionStatus","isSubscribed","subscriptionData","keys","p256dh","arrayBufferToBase64","getKey","responseData","ok","base64String","padding","repeat","base64","replace","rawData","atob","outputArray","Uint8Array","i","charCodeAt","buffer","bytes","binary","byteLength","String","fromCharCode","btoa","sendTestNotification","icon","badge","getPermissionStatus","isPermissionGranted","$2a138afe4ef81a36$export$2e2bcd8739ae039","_pushNotificationService","_marker","_position","_photoBlob","_stream","_initServices","_initCameraButtons","_initForm","_initNotificationSection","on","latlng","lng","toFixed","setLatLng","_updateSubmitButton","startCameraButton","capturPhotoButton","stopCameraButton","video","canvas","preview","mediaDevices","getUserMedia","audio","srcObject","disabled","width","videoWidth","height","videoHeight","context","getContext","drawImage","toBlob","blob","src","createObjectURL","getTracks","track","stop","form","value","onLine","_sendStoryNotification","_saveOfflineStory","hash","ServiceWorkerRegistration","prototype","sync","status","statusElement","enableButton","disableButton","permissionStatus","errorMessage","includes","submitButton","alertContainer","$142158d90aa42607$export$2e2bcd8739ae039","$01a6d536217be17b$export$2e2bcd8739ae039","_authModel","$6b17f08f738443dc$var$routes","_initLoginForm","_initRegisterForm","_id","_story","_fetchStory","_renderStory","cacheError","storyDetail","_initFavoriteButton","favoriteButton","openPopup","hour","minute","_favoriteStories","_loadFavoriteStories","_renderFavoriteStories","_initBulkActions","favoritesListElement","emptyStateElement","bulkActionsElement","sort","a","b","_initRemoveFavoriteButtons","removeButtons","_removeFavoriteStory","clearAllButton","confirmed","confirm","_clearAllFavorites","filter","$a99b1c90995f445f$exports","$6b17f08f738443dc$var$App","_content","_loginMenu","_initApp","_registerServiceWorker","_updateAuthMenu","_renderPage","newWorker","installing","state","controller","_showUpdateNotification","_setupInstallPrompt","_setupOfflineDetection","deferredPrompt","_showInstallPrompt","_hideInstallPrompt","installPrompt","createElement","className","appendChild","prompt","outcome","userChoice","showOfflineIndicator","indicator","updateBanner","insertBefore","firstChild","reload","username","href","oldClone","cloneNode","parentNode","replaceChild","startViewTransition","_updateDOM","slice","toLowerCase","_parseActiveUrl","_getPage","_routeRequiresAuth","resource","focus","_showErrorPage","splitedUrl","split","idParameterRoute","Object","route","baseRoute"],"version":3,"file":"dicoding-story.24a46f21.js.map"}